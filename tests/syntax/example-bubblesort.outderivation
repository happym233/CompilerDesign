stack: 
<$> <START> 
input: 

rule: 
skipping
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

function 
rule: 
<START>: <multiClassDeclOrFuncDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <classDeclOrFuncDef> 
input: 

function 
rule: 
<multiClassDeclOrFuncDef>: <classDeclOrFuncDef> <multiClassDeclOrFuncDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcDef> 
input: 

function 
rule: 
<classDeclOrFuncDef>: <funcDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHead> 
input: 

function 
rule: 
<funcDef>: <funcHead> <funcBody> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id function 
input: 

function 
rule: 
<funcHead>: function id <funcHeadFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id 
input: 

function 
rule: 
matching: function [function, function, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> 
input: 

function bubbleSort 
rule: 
matching: id [id, bubbleSort, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> openpar 
input: 

function bubbleSort ( 
rule: 
<funcHeadFollowing>: openpar <fParams> closepar returntype <returnType> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> 
input: 

function bubbleSort ( 
rule: 
matching: openpar [openpar, (, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

function bubbleSort ( arr 
rule: 
<fParams>: id colon <type> <multiArraySize> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

function bubbleSort ( arr 
rule: 
matching: id [id, arr, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

function bubbleSort ( arr : 
rule: 
matching: colon [colon, :, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> integer 
input: 

function bubbleSort ( arr : integer 
rule: 
<type>: integer 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> 
input: 

function bubbleSort ( arr : integer 
rule: 
matching: integer [integer, integer, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <arraySize> 
input: 

function bubbleSort ( arr : integer [ 
rule: 
<multiArraySize>: <arraySize> <multiArraySize> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <arraySizeParam> opensqbr 
input: 

function bubbleSort ( arr : integer [ 
rule: 
<arraySize>: opensqbr <arraySizeParam> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <arraySizeParam> 
input: 

function bubbleSort ( arr : integer [ 
rule: 
matching: opensqbr [opensqbr, [, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> closesqbr 
input: 

function bubbleSort ( arr : integer [ ] 
rule: 
<arraySizeParam>: closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> 
input: 

function bubbleSort ( arr : integer [ ] 
rule: 
matching: closesqbr [closesqbr, ], 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> 
input: 

function bubbleSort ( arr : integer [ ] , 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <fParamsTail> 
input: 

function bubbleSort ( arr : integer [ ] , 
rule: 
<multiFParamsTail>: <fParamsTail> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon id comma 
input: 

function bubbleSort ( arr : integer [ ] , 
rule: 
<fParamsTail>: comma id colon <type> <multiArraySize> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

function bubbleSort ( arr : integer [ ] , 
rule: 
matching: comma [comma, ,, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

function bubbleSort ( arr : integer [ ] , size 
rule: 
matching: id [id, size, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

function bubbleSort ( arr : integer [ ] , size : 
rule: 
matching: colon [colon, :, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> integer 
input: 

function bubbleSort ( arr : integer [ ] , size : integer 
rule: 
<type>: integer 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer 
rule: 
matching: integer [integer, integer, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) 
rule: 
<multiFParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) 
rule: 
matching: closepar [closepar, ), 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => 
rule: 
matching: returntype [returntype, =>, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> void 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
rule: 
<returnType>: void 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
rule: 
matching: void [void, void, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> opencubr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
rule: 
<funcBody>: opencubr <multiLocalVarDeclOrStmt> closecubr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
rule: 
matching: opencubr [opencubr, {, 3]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDecl> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar 
rule: 
<localVarDeclOrStmt>: <localVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id localvar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar 
rule: 
<localVarDecl>: localvar id colon <type> <localVarDeclFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar 
rule: 
matching: localvar [localvar, localvar, 4]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n 
rule: 
matching: id [id, n, 4]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : 
rule: 
matching: colon [colon, :, 4]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> integer 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer 
rule: 
<type>: integer 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer 
rule: 
matching: integer [integer, integer, 4]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <multiArraySize> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
rule: 
<localVarDeclFollowing>: <multiArraySize> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
rule: 
matching: semi [semi, ;, 4]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDecl> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar 
rule: 
<localVarDeclOrStmt>: <localVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id localvar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar 
rule: 
<localVarDecl>: localvar id colon <type> <localVarDeclFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar 
rule: 
matching: localvar [localvar, localvar, 5]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i 
rule: 
matching: id [id, i, 5]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : 
rule: 
matching: colon [colon, :, 5]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> integer 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer 
rule: 
<type>: integer 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer 
rule: 
matching: integer [integer, integer, 5]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <multiArraySize> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
rule: 
<localVarDeclFollowing>: <multiArraySize> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
rule: 
matching: semi [semi, ;, 5]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDecl> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar 
rule: 
<localVarDeclOrStmt>: <localVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id localvar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar 
rule: 
<localVarDecl>: localvar id colon <type> <localVarDeclFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar 
rule: 
matching: localvar [localvar, localvar, 6]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j 
rule: 
matching: id [id, j, 6]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : 
rule: 
matching: colon [colon, :, 6]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> integer 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer 
rule: 
<type>: integer 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer 
rule: 
matching: integer [integer, integer, 6]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <multiArraySize> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
rule: 
<localVarDeclFollowing>: <multiArraySize> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
rule: 
matching: semi [semi, ;, 6]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDecl> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar 
rule: 
<localVarDeclOrStmt>: <localVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id localvar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar 
rule: 
<localVarDecl>: localvar id colon <type> <localVarDeclFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar 
rule: 
matching: localvar [localvar, localvar, 7]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp 
rule: 
matching: id [id, temp, 7]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : 
rule: 
matching: colon [colon, :, 7]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> integer 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer 
rule: 
<type>: integer 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer 
rule: 
matching: integer [integer, integer, 7]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <multiArraySize> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
rule: 
<localVarDeclFollowing>: <multiArraySize> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
rule: 
matching: semi [semi, ;, 7]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n 
rule: 
matching: id [id, n, 8]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = 
rule: 
matching: assign [assign, =, 8]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size 
rule: 
matching: id [id, size, 8]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
rule: 
matching: semi [semi, ;, 8]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i 
rule: 
matching: id [id, i, 9]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 
rule: 
matching: assign [assign, =, 9]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 
rule: 
matching: intnum [intnum, 0, 9]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
rule: 
matching: semi [semi, ;, 9]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j 
rule: 
matching: id [id, j, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 
rule: 
matching: assign [assign, =, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 
rule: 
matching: intnum [intnum, 0, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
rule: 
matching: semi [semi, ;, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp 
rule: 
matching: id [id, temp, 11]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 
rule: 
matching: assign [assign, =, 11]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 
rule: 
matching: intnum [intnum, 0, 11]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
rule: 
matching: semi [semi, ;, 11]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <relExpr> openpar while 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while 
rule: 
<statement>: while openpar <relExpr> closepar <statBlock> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <relExpr> openpar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while 
rule: 
matching: while [while, while, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <relExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( 
rule: 
matching: openpar [openpar, (, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i 
rule: 
<relExpr>: <arithExpr> <relOp> <arithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i 
rule: 
matching: id [id, i, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> lt 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < 
rule: 
<relOp>: lt 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < 
rule: 
matching: lt [lt, <, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n 
rule: 
matching: id [id, n, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <term> <addOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 
rule: 
<rightrecArithExpr>: <addOp> <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <term> minus 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 
rule: 
<addOp>: minus 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 
rule: 
matching: minus [minus, -, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 
rule: 
matching: intnum [intnum, 1, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) 
rule: 
matching: closepar [closepar, ), 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> opencubr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
rule: 
<statBlock>: opencubr <multiStatement> closecubr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
rule: 
matching: opencubr [opencubr, {, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while 
rule: 
<multiStatement>: <statement> <multiStatement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <relExpr> openpar while 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while 
rule: 
<statement>: while openpar <relExpr> closepar <statBlock> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <relExpr> openpar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while 
rule: 
matching: while [while, while, 13]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <relExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( 
rule: 
matching: openpar [openpar, (, 13]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <arithExpr> <relOp> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j 
rule: 
<relExpr>: <arithExpr> <relOp> <arithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j 
rule: 
matching: id [id, j, 13]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <arithExpr> <relOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <arithExpr> lt 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < 
rule: 
<relOp>: lt 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < 
rule: 
matching: lt [lt, <, 13]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n 
rule: 
matching: id [id, n, 13]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <term> <addOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - 
rule: 
<rightrecArithExpr>: <addOp> <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <term> minus 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - 
rule: 
<addOp>: minus 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - 
rule: 
matching: minus [minus, -, 13]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i 
rule: 
matching: id [id, i, 13]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <term> <addOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 
rule: 
<rightrecArithExpr>: <addOp> <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <term> minus 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 
rule: 
<addOp>: minus 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 
rule: 
matching: minus [minus, -, 13]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 
rule: 
matching: intnum [intnum, 1, 13]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> closepar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <statBlock> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) 
rule: 
matching: closepar [closepar, ), 13]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> opencubr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
rule: 
<statBlock>: opencubr <multiStatement> closecubr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
rule: 
matching: opencubr [opencubr, {, 13]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if 
rule: 
<multiStatement>: <statement> <multiStatement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <relExpr> openpar if 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if 
rule: 
<statement>: if openpar <relExpr> closepar then <statBlock> else <statBlock> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <relExpr> openpar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if 
rule: 
matching: if [if, if, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <relExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( 
rule: 
matching: openpar [openpar, (, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr 
rule: 
<relExpr>: <arithExpr> <relOp> <arithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr 
rule: 
matching: id [id, arr, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> <indice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ 
rule: 
matching: opensqbr [opensqbr, [, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j 
rule: 
matching: id [id, j, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] 
rule: 
matching: closesqbr [closesqbr, ], 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> gt 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > 
rule: 
<relOp>: gt 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > 
rule: 
matching: gt [gt, >, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr 
rule: 
matching: id [id, arr, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> <indice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ 
rule: 
matching: opensqbr [opensqbr, [, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j 
rule: 
matching: id [id, j, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> <addOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 
rule: 
<rightrecArithExpr>: <addOp> <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> plus 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 
rule: 
<addOp>: plus 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 
rule: 
matching: plus [plus, +, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 
rule: 
matching: intnum [intnum, 1, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] 
rule: 
matching: closesqbr [closesqbr, ], 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then closepar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> then 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
rule: 
matching: closepar [closepar, ), 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else <statBlock> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then 
rule: 
matching: then [then, then, 15]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> opencubr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
rule: 
<statBlock>: opencubr <multiStatement> closecubr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
rule: 
matching: opencubr [opencubr, {, 15]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
rule: 
skipping
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp 
rule: 
<multiStatement>: <statement> <multiStatement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp 
rule: 
matching: id [id, temp, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <expr> <assignOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <expr> assign 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = 
rule: 
matching: assign [assign, =, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr 
rule: 
matching: id [id, arr, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> <indice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ 
rule: 
matching: opensqbr [opensqbr, [, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j 
rule: 
matching: id [id, j, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] 
rule: 
matching: closesqbr [closesqbr, ], 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
rule: 
matching: semi [semi, ;, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr 
rule: 
<multiStatement>: <statement> <multiStatement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr 
rule: 
matching: id [id, arr, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> <indice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ 
rule: 
matching: opensqbr [opensqbr, [, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j 
rule: 
matching: id [id, j, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] 
rule: 
matching: closesqbr [closesqbr, ], 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <expr> <assignOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <expr> assign 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = 
rule: 
matching: assign [assign, =, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr 
rule: 
matching: id [id, arr, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> <indice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ 
rule: 
matching: opensqbr [opensqbr, [, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j 
rule: 
matching: id [id, j, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> <addOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 
rule: 
<rightrecArithExpr>: <addOp> <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> plus 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 
rule: 
<addOp>: plus 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 
rule: 
matching: plus [plus, +, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 
rule: 
matching: intnum [intnum, 1, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] 
rule: 
matching: closesqbr [closesqbr, ], 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
rule: 
matching: semi [semi, ;, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr 
rule: 
<multiStatement>: <statement> <multiStatement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr 
rule: 
matching: id [id, arr, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> <indice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ 
rule: 
matching: opensqbr [opensqbr, [, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j 
rule: 
matching: id [id, j, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> <addOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 
rule: 
<rightrecArithExpr>: <addOp> <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> plus 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 
rule: 
<addOp>: plus 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 
rule: 
matching: plus [plus, +, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 
rule: 
matching: intnum [intnum, 1, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] 
rule: 
matching: closesqbr [closesqbr, ], 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <expr> <assignOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <expr> assign 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = 
rule: 
matching: assign [assign, =, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp 
rule: 
matching: id [id, temp, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr <multiStatement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
rule: 
matching: semi [semi, ;, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else closecubr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} 
rule: 
<multiStatement>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> else 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} 
rule: 
matching: closecubr [closecubr, }, 20]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <statBlock> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else 
rule: 
matching: else [else, else, 20]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
rule: 
<statBlock>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
rule: 
matching: semi [semi, ;, 20]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j 
rule: 
<multiStatement>: <statement> <multiStatement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j 
rule: 
matching: id [id, j, 21]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <expr> <assignOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <expr> assign 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = 
rule: 
matching: assign [assign, =, 21]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j 
rule: 
matching: id [id, j, 21]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <term> <addOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 
rule: 
<rightrecArithExpr>: <addOp> <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <term> plus 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 
rule: 
<addOp>: plus 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 
rule: 
matching: plus [plus, +, 21]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 
rule: 
matching: intnum [intnum, 1, 21]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr <multiStatement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
rule: 
matching: semi [semi, ;, 21]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closecubr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} 
rule: 
<multiStatement>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} 
rule: 
matching: closecubr [closecubr, }, 22]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
rule: 
matching: semi [semi, ;, 22]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i 
rule: 
<multiStatement>: <statement> <multiStatement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i 
rule: 
matching: id [id, i, 23]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <expr> <assignOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <expr> assign 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = 
rule: 
matching: assign [assign, =, 23]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i 
rule: 
matching: id [id, i, 23]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <term> <addOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 
rule: 
<rightrecArithExpr>: <addOp> <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <term> plus 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 
rule: 
<addOp>: plus 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 
rule: 
matching: plus [plus, +, 23]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 
rule: 
matching: intnum [intnum, 1, 23]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
rule: 
matching: semi [semi, ;, 23]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} 
rule: 
<multiStatement>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} 
rule: 
matching: closecubr [closecubr, }, 24]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
rule: 
matching: semi [semi, ;, 24]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
rule: 
<multiLocalVarDeclOrStmt>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
rule: 
matching: closecubr [closecubr, }, 25]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
rule: 
skipping
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <classDeclOrFuncDef> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function 
rule: 
<multiClassDeclOrFuncDef>: <classDeclOrFuncDef> <multiClassDeclOrFuncDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcDef> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function 
rule: 
<classDeclOrFuncDef>: <funcDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHead> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function 
rule: 
<funcDef>: <funcHead> <funcBody> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id function 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function 
rule: 
<funcHead>: function id <funcHeadFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function 
rule: 
matching: function [function, function, 28]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray 
rule: 
matching: id [id, printArray, 28]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> openpar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( 
rule: 
<funcHeadFollowing>: openpar <fParams> closepar returntype <returnType> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( 
rule: 
matching: openpar [openpar, (, 28]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr 
rule: 
<fParams>: id colon <type> <multiArraySize> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr 
rule: 
matching: id [id, arr, 28]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : 
rule: 
matching: colon [colon, :, 28]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> integer 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer 
rule: 
<type>: integer 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer 
rule: 
matching: integer [integer, integer, 28]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <arraySize> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ 
rule: 
<multiArraySize>: <arraySize> <multiArraySize> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <arraySizeParam> opensqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ 
rule: 
<arraySize>: opensqbr <arraySizeParam> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <arraySizeParam> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ 
rule: 
matching: opensqbr [opensqbr, [, 28]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> closesqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] 
rule: 
<arraySizeParam>: closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] 
rule: 
matching: closesqbr [closesqbr, ], 28]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <fParamsTail> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , 
rule: 
<multiFParamsTail>: <fParamsTail> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon id comma 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , 
rule: 
<fParamsTail>: comma id colon <type> <multiArraySize> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , 
rule: 
matching: comma [comma, ,, 28]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size 
rule: 
matching: id [id, size, 28]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : 
rule: 
matching: colon [colon, :, 28]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> integer 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer 
rule: 
<type>: integer 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer 
rule: 
matching: integer [integer, integer, 28]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) 
rule: 
<multiFParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) 
rule: 
matching: closepar [closepar, ), 28]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => 
rule: 
matching: returntype [returntype, =>, 28]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> void 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
rule: 
<returnType>: void 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
rule: 
matching: void [void, void, 28]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> opencubr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
rule: 
<funcBody>: opencubr <multiLocalVarDeclOrStmt> closecubr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
rule: 
matching: opencubr [opencubr, {, 29]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDecl> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar 
rule: 
<localVarDeclOrStmt>: <localVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id localvar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar 
rule: 
<localVarDecl>: localvar id colon <type> <localVarDeclFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar 
rule: 
matching: localvar [localvar, localvar, 30]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n 
rule: 
matching: id [id, n, 30]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : 
rule: 
matching: colon [colon, :, 30]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> integer 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer 
rule: 
<type>: integer 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer 
rule: 
matching: integer [integer, integer, 30]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <multiArraySize> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
rule: 
<localVarDeclFollowing>: <multiArraySize> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
rule: 
matching: semi [semi, ;, 30]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDecl> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar 
rule: 
<localVarDeclOrStmt>: <localVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id localvar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar 
rule: 
<localVarDecl>: localvar id colon <type> <localVarDeclFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar 
rule: 
matching: localvar [localvar, localvar, 31]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i 
rule: 
matching: id [id, i, 31]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : 
rule: 
matching: colon [colon, :, 31]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> integer 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer 
rule: 
<type>: integer 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer 
rule: 
matching: integer [integer, integer, 31]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <multiArraySize> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
rule: 
<localVarDeclFollowing>: <multiArraySize> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
rule: 
matching: semi [semi, ;, 31]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n 
rule: 
matching: id [id, n, 32]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = 
rule: 
matching: assign [assign, =, 32]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size 
rule: 
matching: id [id, size, 32]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
rule: 
matching: semi [semi, ;, 32]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i 
rule: 
matching: id [id, i, 33]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 
rule: 
matching: assign [assign, =, 33]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 
rule: 
matching: intnum [intnum, 0, 33]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
rule: 
matching: semi [semi, ;, 33]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <relExpr> openpar while 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while 
rule: 
<statement>: while openpar <relExpr> closepar <statBlock> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <relExpr> openpar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while 
rule: 
matching: while [while, while, 34]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <relExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( 
rule: 
matching: openpar [openpar, (, 34]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i 
rule: 
<relExpr>: <arithExpr> <relOp> <arithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i 
rule: 
matching: id [id, i, 34]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> lt 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < 
rule: 
<relOp>: lt 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < 
rule: 
matching: lt [lt, <, 34]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n 
rule: 
matching: id [id, n, 34]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) 
rule: 
matching: closepar [closepar, ), 34]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> opencubr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
rule: 
<statBlock>: opencubr <multiStatement> closecubr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
rule: 
matching: opencubr [opencubr, {, 34]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write 
rule: 
<multiStatement>: <statement> <multiStatement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <expr> openpar write 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write 
rule: 
<statement>: write openpar <expr> closepar semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <expr> openpar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write 
rule: 
matching: write [write, write, 35]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( 
rule: 
matching: openpar [openpar, (, 35]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr 
rule: 
matching: id [id, arr, 35]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> <indice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ 
rule: 
matching: opensqbr [opensqbr, [, 35]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i 
rule: 
matching: id [id, i, 35]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] 
rule: 
matching: closesqbr [closesqbr, ], 35]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) 
rule: 
matching: closepar [closepar, ), 35]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
rule: 
matching: semi [semi, ;, 35]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i 
rule: 
<multiStatement>: <statement> <multiStatement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i 
rule: 
matching: id [id, i, 36]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <expr> <assignOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <expr> assign 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = 
rule: 
matching: assign [assign, =, 36]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i 
rule: 
matching: id [id, i, 36]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <term> <addOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 
rule: 
<rightrecArithExpr>: <addOp> <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <term> plus 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 
rule: 
<addOp>: plus 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 
rule: 
matching: plus [plus, +, 36]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 
rule: 
matching: intnum [intnum, 1, 36]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
rule: 
matching: semi [semi, ;, 36]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} 
rule: 
<multiStatement>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} 
rule: 
matching: closecubr [closecubr, }, 37]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
rule: 
matching: semi [semi, ;, 37]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
rule: 
<multiLocalVarDeclOrStmt>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
rule: 
matching: closecubr [closecubr, }, 38]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
rule: 
skipping
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <classDeclOrFuncDef> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function 
rule: 
<multiClassDeclOrFuncDef>: <classDeclOrFuncDef> <multiClassDeclOrFuncDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcDef> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function 
rule: 
<classDeclOrFuncDef>: <funcDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHead> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function 
rule: 
<funcDef>: <funcHead> <funcBody> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id function 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function 
rule: 
<funcHead>: function id <funcHeadFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function 
rule: 
matching: function [function, function, 41]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main 
rule: 
matching: id [id, main, 41]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> openpar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( 
rule: 
<funcHeadFollowing>: openpar <fParams> closepar returntype <returnType> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( 
rule: 
matching: openpar [openpar, (, 41]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) 
rule: 
<fParams>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) 
rule: 
matching: closepar [closepar, ), 41]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
rule: 
matching: returntype [returntype, =>, 41]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> void 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void 
rule: 
<returnType>: void 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void 
rule: 
matching: void [void, void, 42]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> opencubr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
rule: 
<funcBody>: opencubr <multiLocalVarDeclOrStmt> closecubr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
rule: 
matching: opencubr [opencubr, {, 42]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDecl> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar 
rule: 
<localVarDeclOrStmt>: <localVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id localvar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar 
rule: 
<localVarDecl>: localvar id colon <type> <localVarDeclFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar 
rule: 
matching: localvar [localvar, localvar, 43]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr 
rule: 
matching: id [id, arr, 43]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : 
rule: 
matching: colon [colon, :, 43]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> integer 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer 
rule: 
<type>: integer 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer 
rule: 
matching: integer [integer, integer, 43]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <multiArraySize> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 
rule: 
<localVarDeclFollowing>: <multiArraySize> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <multiArraySize> <arraySize> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 
rule: 
<multiArraySize>: <arraySize> <multiArraySize> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <multiArraySize> <arraySizeParam> opensqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 
rule: 
<arraySize>: opensqbr <arraySizeParam> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <multiArraySize> <arraySizeParam> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 
rule: 
matching: opensqbr [opensqbr, [, 43]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <multiArraySize> closesqbr intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 
rule: 
<arraySizeParam>: intnum closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <multiArraySize> closesqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 
rule: 
matching: intnum [intnum, 7, 43]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <multiArraySize> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] 
rule: 
matching: closesqbr [closesqbr, ], 43]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
rule: 
matching: semi [semi, ;, 43]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr 
rule: 
matching: id [id, arr, 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> <indice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 
rule: 
matching: opensqbr [opensqbr, [, 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 
rule: 
matching: intnum [intnum, 0, 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] 
rule: 
matching: closesqbr [closesqbr, ], 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 
rule: 
matching: assign [assign, =, 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 
rule: 
matching: intnum [intnum, 64, 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
rule: 
matching: semi [semi, ;, 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr 
rule: 
matching: id [id, arr, 45]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> <indice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 
rule: 
matching: opensqbr [opensqbr, [, 45]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 
rule: 
matching: intnum [intnum, 1, 45]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] 
rule: 
matching: closesqbr [closesqbr, ], 45]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 
rule: 
matching: assign [assign, =, 45]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 
rule: 
matching: intnum [intnum, 34, 45]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
rule: 
matching: semi [semi, ;, 45]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr 
rule: 
matching: id [id, arr, 46]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> <indice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 
rule: 
matching: opensqbr [opensqbr, [, 46]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 
rule: 
matching: intnum [intnum, 2, 46]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] 
rule: 
matching: closesqbr [closesqbr, ], 46]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 
rule: 
matching: assign [assign, =, 46]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 
rule: 
matching: intnum [intnum, 25, 46]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
rule: 
matching: semi [semi, ;, 46]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr 
rule: 
matching: id [id, arr, 47]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> <indice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 
rule: 
matching: opensqbr [opensqbr, [, 47]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 
rule: 
matching: intnum [intnum, 3, 47]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] 
rule: 
matching: closesqbr [closesqbr, ], 47]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 
rule: 
matching: assign [assign, =, 47]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 
rule: 
matching: intnum [intnum, 12, 47]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
rule: 
matching: semi [semi, ;, 47]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr 
rule: 
matching: id [id, arr, 48]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> <indice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 
rule: 
matching: opensqbr [opensqbr, [, 48]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 
rule: 
matching: intnum [intnum, 4, 48]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] 
rule: 
matching: closesqbr [closesqbr, ], 48]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 
rule: 
matching: assign [assign, =, 48]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 
rule: 
matching: intnum [intnum, 22, 48]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
rule: 
matching: semi [semi, ;, 48]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr 
rule: 
matching: id [id, arr, 49]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> <indice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 
rule: 
matching: opensqbr [opensqbr, [, 49]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 
rule: 
matching: intnum [intnum, 5, 49]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] 
rule: 
matching: closesqbr [closesqbr, ], 49]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 
rule: 
matching: assign [assign, =, 49]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 
rule: 
matching: intnum [intnum, 11, 49]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
rule: 
matching: semi [semi, ;, 49]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr 
rule: 
matching: id [id, arr, 50]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> <indice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 
rule: 
matching: opensqbr [opensqbr, [, 50]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 
rule: 
matching: intnum [intnum, 6, 50]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] 
rule: 
matching: closesqbr [closesqbr, ], 50]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 
rule: 
matching: assign [assign, =, 50]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 
rule: 
matching: intnum [intnum, 90, 50]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
rule: 
matching: semi [semi, ;, 50]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray 
rule: 
matching: id [id, printarray, 51]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <aParams> openpar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( 
rule: 
<idnestFollowing>: openpar <aParams> closepar 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <aParams> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( 
rule: 
matching: openpar [openpar, (, 51]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr 
rule: 
<aParams>: <expr> <multiAParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr 
rule: 
matching: id [id, arr, 51]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <aParamsTail> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 
rule: 
<multiAParamsTail>: <aParamsTail> <multiAParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <expr> comma 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 
rule: 
<aParamsTail>: comma <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 
rule: 
matching: comma [comma, ,, 51]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 
rule: 
matching: intnum [intnum, 7, 51]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) 
rule: 
<multiAParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) 
rule: 
matching: closepar [closepar, ), 51]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
rule: 
<functionCallOrAssignStat>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
rule: 
matching: semi [semi, ;, 51]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort 
rule: 
matching: id [id, bubbleSort, 52]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <aParams> openpar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( 
rule: 
<idnestFollowing>: openpar <aParams> closepar 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <aParams> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( 
rule: 
matching: openpar [openpar, (, 52]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr 
rule: 
<aParams>: <expr> <multiAParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr 
rule: 
matching: id [id, arr, 52]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <aParamsTail> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 
rule: 
<multiAParamsTail>: <aParamsTail> <multiAParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <expr> comma 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 
rule: 
<aParamsTail>: comma <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 
rule: 
matching: comma [comma, ,, 52]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 
rule: 
matching: intnum [intnum, 7, 52]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) 
rule: 
<multiAParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) 
rule: 
matching: closepar [closepar, ), 52]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
rule: 
<functionCallOrAssignStat>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
rule: 
matching: semi [semi, ;, 52]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray 
rule: 
matching: id [id, printarray, 53]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <aParams> openpar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( 
rule: 
<idnestFollowing>: openpar <aParams> closepar 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <aParams> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( 
rule: 
matching: openpar [openpar, (, 53]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr 
rule: 
<aParams>: <expr> <multiAParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr 
rule: 
matching: id [id, arr, 53]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <aParamsTail> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 
rule: 
<multiAParamsTail>: <aParamsTail> <multiAParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <expr> comma 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 
rule: 
<aParamsTail>: comma <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <expr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 
rule: 
matching: comma [comma, ,, 53]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <arithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 7 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <term> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 7 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 7 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 7 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 7 
rule: 
matching: intnum [intnum, 7, 53]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 7 ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 7 ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 7 ) 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> closepar 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 7 ) 
rule: 
<multiAParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 7 ) 
rule: 
matching: closepar [closepar, ), 53]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 7 ) ; 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 7 ) ; 
rule: 
<functionCallOrAssignStat>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 7 ) ; 
rule: 
matching: semi [semi, ;, 53]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 7 ) ; 
} 
rule: 
<multiLocalVarDeclOrStmt>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 7 ) ; 
} 
rule: 
matching: closecubr [closecubr, }, 54]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 7 ) ; 
} 
/*
    classes
    --------------------------------------
|X| no class declaration
| | class declaration
| | multiple class declarations
| | no data member declaration
| | data member declaration
| | multiple data member declaration
| | no member function declaration
| | member function declaration
| | multiple member function declaration
| | no member
| | no inherited class
| | one inherited class
| | multiple inherited classes
| | private member specifier
| | public member specifier

    functions: definitions
    --------------------------------------
| | no main function definition
|X| main function definition
| | no free function definition
|X| free function definition
|X| multiple free function definitions
|X| no member function definition
| | member function definition
| | multiple member function definitions
|X| return type: void
| | return type: integer
| | return type: float
| | return type: id
| | return type: array (not allowed)

    functions: formal parameters
    --------------------------------------
|X| type: integer
| | type: float
| | type: id
|X| type: 1-dim array 
| | type: n-dim array
| | type: array (with size)
|X| type: array (without size)

    functions: calls
    --------------------------------------
|X| free function call
| | member function call
| | parameters:0
| | parameters:1
|X| parameters:n
|X| array parameter - 1-dim
| | array parameter - n-dim
| | array parameter - with size
| | array parameter - without size
| | function call as statement
| | function call as expression factor
| | expression as parameter

    variable declaration
    --------------------------------------
|X| type: integer
| | type: float
| | type: string
| | type: id
|X| type: 1-dim array 
| | type: n-dim array
|X| type: array (with size)
| | type: array (without size) (not allowed)

    function body: local variable declarations
    --------------------------------------
| | no local variable declarations
|X| local variable declarations
| | intertwined statements and variable declarations

    function body: statements
    --------------------------------------
| | no statement
| | 1 statement
|X| n statements
|X| if statement
|X| if: empty then or else blocks
| | if: 1-statement then or else blocks
|X| if: n-statements then or else blocks
|X| while statement
| | while: empty block
| | while: 1-statement block
|X| while: n-statement block
| | read(<variable>) statement
|X| write(<expr>) statement
|X| return(<expr>) statement
|X| assignment statement

    variable + idnest
    --------------------------------------
|X| id
| | id.id
| | id.id(id)
| | id(id).id
| | id(id).id()
| | id.id[id]
| | id[id].id
| | id[id].id[id]
| | id.id[id][id]
| | id[id][id].id
| | id[id][id].id[id][id]
| | id(id).id[id]
| | id(id).id[id][id]
| | expression as array index

    expressions
    --------------------------------------
|X| single variable
|X| involving addop
| | involving multop
|X| involving relop
| | involving addop + multop
|X| involving multop + relop
| | involving addop + multop + relop
| | involving parentheses
| | involving nested parentheses
| | involving not
| | involving sign
|X| involving literals
| | involving variable + idnest
|X| involving function calls
| | involving all the above in one expression
*/ 
rule: 
skipping
-----------------------------------------------------------------------
stack: 
<$> 
input: 

function bubbleSort ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
localvar j : integer ; 
localvar temp : integer ; 
n = size ; 
i = 0 ; 
j = 0 ; 
temp = 0 ; 
while ( i < n - 1 ) { 
while ( j < n - i - 1 ) { 
if ( arr [ j ] > arr [ j + 1 ] ) 
then { 
// swap temp and arr[i] 
temp = arr [ j ] ; 
arr [ j ] = arr [ j + 1 ] ; 
arr [ j + 1 ] = temp ; 
} else ; 
j = j + 1 ; 
} ; 
i = i + 1 ; 
} ; 
} 
/* print the array */ 
function printArray ( arr : integer [ ] , size : integer ) => void 
{ 
localvar n : integer ; 
localvar i : integer ; 
n = size ; 
i = 0 ; 
while ( i < n ) { 
write ( arr [ i ] ) ; 
i = i + 1 ; 
} ; 
} 
// main funtion to test above 
function main ( ) => 
void { 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printarray ( arr , 7 ) ; 
bubbleSort ( arr , 7 ) ; 
printarray ( arr , 7 ) ; 
} 
/*
    classes
    --------------------------------------
|X| no class declaration
| | class declaration
| | multiple class declarations
| | no data member declaration
| | data member declaration
| | multiple data member declaration
| | no member function declaration
| | member function declaration
| | multiple member function declaration
| | no member
| | no inherited class
| | one inherited class
| | multiple inherited classes
| | private member specifier
| | public member specifier

    functions: definitions
    --------------------------------------
| | no main function definition
|X| main function definition
| | no free function definition
|X| free function definition
|X| multiple free function definitions
|X| no member function definition
| | member function definition
| | multiple member function definitions
|X| return type: void
| | return type: integer
| | return type: float
| | return type: id
| | return type: array (not allowed)

    functions: formal parameters
    --------------------------------------
|X| type: integer
| | type: float
| | type: id
|X| type: 1-dim array 
| | type: n-dim array
| | type: array (with size)
|X| type: array (without size)

    functions: calls
    --------------------------------------
|X| free function call
| | member function call
| | parameters:0
| | parameters:1
|X| parameters:n
|X| array parameter - 1-dim
| | array parameter - n-dim
| | array parameter - with size
| | array parameter - without size
| | function call as statement
| | function call as expression factor
| | expression as parameter

    variable declaration
    --------------------------------------
|X| type: integer
| | type: float
| | type: string
| | type: id
|X| type: 1-dim array 
| | type: n-dim array
|X| type: array (with size)
| | type: array (without size) (not allowed)

    function body: local variable declarations
    --------------------------------------
| | no local variable declarations
|X| local variable declarations
| | intertwined statements and variable declarations

    function body: statements
    --------------------------------------
| | no statement
| | 1 statement
|X| n statements
|X| if statement
|X| if: empty then or else blocks
| | if: 1-statement then or else blocks
|X| if: n-statements then or else blocks
|X| while statement
| | while: empty block
| | while: 1-statement block
|X| while: n-statement block
| | read(<variable>) statement
|X| write(<expr>) statement
|X| return(<expr>) statement
|X| assignment statement

    variable + idnest
    --------------------------------------
|X| id
| | id.id
| | id.id(id)
| | id(id).id
| | id(id).id()
| | id.id[id]
| | id[id].id
| | id[id].id[id]
| | id.id[id][id]
| | id[id][id].id
| | id[id][id].id[id][id]
| | id(id).id[id]
| | id(id).id[id][id]
| | expression as array index

    expressions
    --------------------------------------
|X| single variable
|X| involving addop
| | involving multop
|X| involving relop
| | involving addop + multop
|X| involving multop + relop
| | involving addop + multop + relop
| | involving parentheses
| | involving nested parentheses
| | involving not
| | involving sign
|X| involving literals
| | involving variable + idnest
|X| involving function calls
| | involving all the above in one expression
*/ 
rule: 
<multiClassDeclOrFuncDef>: 
-----------------------------------------------------------------------
