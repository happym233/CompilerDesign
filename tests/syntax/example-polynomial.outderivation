stack: 
<$> <START> 
input: 

rule: 
skipping
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

class 
rule: 
<START>: <multiClassDeclOrFuncDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <classDeclOrFuncDef> 
input: 

class 
rule: 
<multiClassDeclOrFuncDef>: <classDeclOrFuncDef> <multiClassDeclOrFuncDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <classDecl> 
input: 

class 
rule: 
<classDeclOrFuncDef>: <classDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <optClassDecl2> id class 
input: 

class 
rule: 
<classDecl>: class id <optClassDecl2> opencubr <multiVisiMemberDecl> closecubr semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <optClassDecl2> id 
input: 

class 
rule: 
matching: class [class, class, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <optClassDecl2> 
input: 

class POLYNOMIAL 
rule: 
matching: id [id, POLYNOMIAL, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr 
input: 

class POLYNOMIAL { 
rule: 
<optClassDecl2>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> 
input: 

class POLYNOMIAL { 
rule: 
matching: opencubr [opencubr, {, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> <visibility> 
input: 

class POLYNOMIAL { 
public 
rule: 
<multiVisiMemberDecl>: <visibility> <memberDecl> <multiVisiMemberDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> public 
input: 

class POLYNOMIAL { 
public 
rule: 
<visibility>: public 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> 
input: 

class POLYNOMIAL { 
public 
rule: 
matching: public [public, public, 3]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberFuncDecl> 
input: 

class POLYNOMIAL { 
public function 
rule: 
<memberDecl>: <memberFuncDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <fParams> openpar colon id function 
input: 

class POLYNOMIAL { 
public function 
rule: 
<memberFuncDecl>: function id colon openpar <fParams> closepar returntype <returnType> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <fParams> openpar colon id 
input: 

class POLYNOMIAL { 
public function 
rule: 
matching: function [function, function, 3]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <fParams> openpar colon 
input: 

class POLYNOMIAL { 
public function evaluate 
rule: 
matching: id [id, evaluate, 3]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <fParams> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : 
rule: 
matching: colon [colon, :, 3]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <fParams> 
input: 

class POLYNOMIAL { 
public function evaluate : ( 
rule: 
matching: openpar [openpar, (, 3]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x 
rule: 
<fParams>: id colon <type> <multiArraySize> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x 
rule: 
matching: id [id, x, 3]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : 
rule: 
matching: colon [colon, :, 3]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <multiFParamsTail> <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <multiFParamsTail> <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float 
rule: 
matching: float [float, float, 3]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <multiFParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) 
rule: 
<multiFParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) 
rule: 
matching: closepar [closepar, ), 3]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => 
rule: 
matching: returntype [returntype, =>, 3]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float 
rule: 
<returnType>: <type> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float 
rule: 
matching: float [float, float, 3]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
rule: 
matching: semi [semi, ;, 3]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} 
rule: 
<multiVisiMemberDecl>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} 
rule: 
matching: closecubr [closecubr, }, 4]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
rule: 
matching: semi [semi, ;, 4]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <classDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class 
rule: 
<multiClassDeclOrFuncDef>: <classDeclOrFuncDef> <multiClassDeclOrFuncDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <classDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class 
rule: 
<classDeclOrFuncDef>: <classDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <optClassDecl2> id class 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class 
rule: 
<classDecl>: class id <optClassDecl2> opencubr <multiVisiMemberDecl> closecubr semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <optClassDecl2> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class 
rule: 
matching: class [class, class, 6]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <optClassDecl2> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR 
rule: 
matching: id [id, LINEAR, 6]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <multiCommaId> id isa 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa 
rule: 
<optClassDecl2>: isa id <multiCommaId> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <multiCommaId> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa 
rule: 
matching: isa [isa, isa, 6]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <multiCommaId> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL 
rule: 
matching: id [id, POLYNOMIAL, 6]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
rule: 
<multiCommaId>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
rule: 
matching: opencubr [opencubr, {, 6]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> <visibility> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private 
rule: 
<multiVisiMemberDecl>: <visibility> <memberDecl> <multiVisiMemberDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> private 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private 
rule: 
<visibility>: private 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private 
rule: 
matching: private [private, private, 7]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberVarDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute 
rule: 
<memberDecl>: <memberVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon id attribute 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute 
rule: 
<memberVarDecl>: attribute id colon <type> <multiArraySize> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute 
rule: 
matching: attribute [attribute, attribute, 7]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a 
rule: 
matching: id [id, a, 7]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : 
rule: 
matching: colon [colon, :, 7]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float 
rule: 
matching: float [float, float, 7]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
rule: 
matching: semi [semi, ;, 7]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> <visibility> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private 
rule: 
<multiVisiMemberDecl>: <visibility> <memberDecl> <multiVisiMemberDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> private 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private 
rule: 
<visibility>: private 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private 
rule: 
matching: private [private, private, 8]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberVarDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute 
rule: 
<memberDecl>: <memberVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon id attribute 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute 
rule: 
<memberVarDecl>: attribute id colon <type> <multiArraySize> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute 
rule: 
matching: attribute [attribute, attribute, 8]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b 
rule: 
matching: id [id, b, 8]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : 
rule: 
matching: colon [colon, :, 8]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float 
rule: 
matching: float [float, float, 8]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
rule: 
matching: semi [semi, ;, 8]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> <visibility> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public 
rule: 
<multiVisiMemberDecl>: <visibility> <memberDecl> <multiVisiMemberDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> public 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public 
rule: 
<visibility>: public 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public 
rule: 
matching: public [public, public, 9]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberFuncDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor 
rule: 
<memberDecl>: <memberFuncDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <fParams> openpar colon constructor 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor 
rule: 
<memberFuncDecl>: constructor colon openpar <fParams> closepar semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <fParams> openpar colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor 
rule: 
matching: constructor [constructor, constructor, 9]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <fParams> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : 
rule: 
matching: colon [colon, :, 9]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <fParams> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( 
rule: 
matching: openpar [openpar, (, 9]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A 
rule: 
<fParams>: id colon <type> <multiArraySize> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A 
rule: 
matching: id [id, A, 9]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : 
rule: 
matching: colon [colon, :, 9]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float 
rule: 
matching: float [float, float, 9]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <fParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , 
rule: 
<multiFParamsTail>: <fParamsTail> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> colon id comma 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , 
rule: 
<fParamsTail>: comma id colon <type> <multiArraySize> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , 
rule: 
matching: comma [comma, ,, 9]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B 
rule: 
matching: id [id, B, 9]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : 
rule: 
matching: colon [colon, :, 9]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float 
rule: 
matching: float [float, float, 9]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) 
rule: 
<multiFParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) 
rule: 
matching: closepar [closepar, ), 9]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
rule: 
matching: semi [semi, ;, 9]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> <visibility> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public 
rule: 
<multiVisiMemberDecl>: <visibility> <memberDecl> <multiVisiMemberDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> public 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public 
rule: 
<visibility>: public 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public 
rule: 
matching: public [public, public, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberFuncDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function 
rule: 
<memberDecl>: <memberFuncDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <fParams> openpar colon id function 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function 
rule: 
<memberFuncDecl>: function id colon openpar <fParams> closepar returntype <returnType> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <fParams> openpar colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function 
rule: 
matching: function [function, function, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <fParams> openpar colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate 
rule: 
matching: id [id, evaluate, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <fParams> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : 
rule: 
matching: colon [colon, :, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <fParams> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( 
rule: 
matching: openpar [openpar, (, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x 
rule: 
<fParams>: id colon <type> <multiArraySize> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x 
rule: 
matching: id [id, x, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : 
rule: 
matching: colon [colon, :, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <multiFParamsTail> <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <multiFParamsTail> <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float 
rule: 
matching: float [float, float, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <multiFParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) 
rule: 
<multiFParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) 
rule: 
matching: closepar [closepar, ), 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => 
rule: 
matching: returntype [returntype, =>, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float 
rule: 
<returnType>: <type> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float 
rule: 
matching: float [float, float, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
rule: 
matching: semi [semi, ;, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} 
rule: 
<multiVisiMemberDecl>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} 
rule: 
matching: closecubr [closecubr, }, 11]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
rule: 
matching: semi [semi, ;, 11]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <classDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class 
rule: 
<multiClassDeclOrFuncDef>: <classDeclOrFuncDef> <multiClassDeclOrFuncDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <classDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class 
rule: 
<classDeclOrFuncDef>: <classDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <optClassDecl2> id class 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class 
rule: 
<classDecl>: class id <optClassDecl2> opencubr <multiVisiMemberDecl> closecubr semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <optClassDecl2> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class 
rule: 
matching: class [class, class, 13]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <optClassDecl2> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC 
rule: 
matching: id [id, QUADRATIC, 13]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <multiCommaId> id isa 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa 
rule: 
<optClassDecl2>: isa id <multiCommaId> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <multiCommaId> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa 
rule: 
matching: isa [isa, isa, 13]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <multiCommaId> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL 
rule: 
matching: id [id, POLYNOMIAL, 13]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
rule: 
<multiCommaId>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
rule: 
matching: opencubr [opencubr, {, 13]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> <visibility> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private 
rule: 
<multiVisiMemberDecl>: <visibility> <memberDecl> <multiVisiMemberDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> private 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private 
rule: 
<visibility>: private 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private 
rule: 
matching: private [private, private, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberVarDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute 
rule: 
<memberDecl>: <memberVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon id attribute 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute 
rule: 
<memberVarDecl>: attribute id colon <type> <multiArraySize> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute 
rule: 
matching: attribute [attribute, attribute, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a 
rule: 
matching: id [id, a, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : 
rule: 
matching: colon [colon, :, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float 
rule: 
matching: float [float, float, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
rule: 
matching: semi [semi, ;, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> <visibility> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private 
rule: 
<multiVisiMemberDecl>: <visibility> <memberDecl> <multiVisiMemberDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> private 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private 
rule: 
<visibility>: private 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private 
rule: 
matching: private [private, private, 15]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberVarDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute 
rule: 
<memberDecl>: <memberVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon id attribute 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute 
rule: 
<memberVarDecl>: attribute id colon <type> <multiArraySize> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute 
rule: 
matching: attribute [attribute, attribute, 15]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b 
rule: 
matching: id [id, b, 15]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : 
rule: 
matching: colon [colon, :, 15]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float 
rule: 
matching: float [float, float, 15]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
rule: 
matching: semi [semi, ;, 15]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> <visibility> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private 
rule: 
<multiVisiMemberDecl>: <visibility> <memberDecl> <multiVisiMemberDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> private 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private 
rule: 
<visibility>: private 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private 
rule: 
matching: private [private, private, 16]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberVarDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute 
rule: 
<memberDecl>: <memberVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon id attribute 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute 
rule: 
<memberVarDecl>: attribute id colon <type> <multiArraySize> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute 
rule: 
matching: attribute [attribute, attribute, 16]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c 
rule: 
matching: id [id, c, 16]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : 
rule: 
matching: colon [colon, :, 16]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float 
rule: 
matching: float [float, float, 16]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
rule: 
matching: semi [semi, ;, 16]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> <visibility> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public 
rule: 
<multiVisiMemberDecl>: <visibility> <memberDecl> <multiVisiMemberDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> public 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public 
rule: 
<visibility>: public 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public 
rule: 
matching: public [public, public, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberFuncDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor 
rule: 
<memberDecl>: <memberFuncDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <fParams> openpar colon constructor 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor 
rule: 
<memberFuncDecl>: constructor colon openpar <fParams> closepar semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <fParams> openpar colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor 
rule: 
matching: constructor [constructor, constructor, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <fParams> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : 
rule: 
matching: colon [colon, :, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <fParams> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( 
rule: 
matching: openpar [openpar, (, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A 
rule: 
<fParams>: id colon <type> <multiArraySize> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A 
rule: 
matching: id [id, A, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : 
rule: 
matching: colon [colon, :, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float 
rule: 
matching: float [float, float, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <fParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , 
rule: 
<multiFParamsTail>: <fParamsTail> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> colon id comma 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , 
rule: 
<fParamsTail>: comma id colon <type> <multiArraySize> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , 
rule: 
matching: comma [comma, ,, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B 
rule: 
matching: id [id, B, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : 
rule: 
matching: colon [colon, :, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float 
rule: 
matching: float [float, float, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <fParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , 
rule: 
<multiFParamsTail>: <fParamsTail> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> colon id comma 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , 
rule: 
<fParamsTail>: comma id colon <type> <multiArraySize> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , 
rule: 
matching: comma [comma, ,, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C 
rule: 
matching: id [id, C, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : 
rule: 
matching: colon [colon, :, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float 
rule: 
matching: float [float, float, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) 
rule: 
<multiFParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) 
rule: 
matching: closepar [closepar, ), 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
rule: 
matching: semi [semi, ;, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> <visibility> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public 
rule: 
<multiVisiMemberDecl>: <visibility> <memberDecl> <multiVisiMemberDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> public 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public 
rule: 
<visibility>: public 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public 
rule: 
matching: public [public, public, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberFuncDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function 
rule: 
<memberDecl>: <memberFuncDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <fParams> openpar colon id function 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function 
rule: 
<memberFuncDecl>: function id colon openpar <fParams> closepar returntype <returnType> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <fParams> openpar colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function 
rule: 
matching: function [function, function, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <fParams> openpar colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate 
rule: 
matching: id [id, evaluate, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <fParams> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : 
rule: 
matching: colon [colon, :, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <fParams> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( 
rule: 
matching: openpar [openpar, (, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x 
rule: 
<fParams>: id colon <type> <multiArraySize> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x 
rule: 
matching: id [id, x, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : 
rule: 
matching: colon [colon, :, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <multiFParamsTail> <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <multiFParamsTail> <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float 
rule: 
matching: float [float, float, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar <multiFParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) 
rule: 
<multiFParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> returntype 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) 
rule: 
matching: closepar [closepar, ), 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <returnType> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => 
rule: 
matching: returntype [returntype, =>, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float 
rule: 
<returnType>: <type> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float 
rule: 
matching: float [float, float, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
rule: 
matching: semi [semi, ;, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} 
rule: 
<multiVisiMemberDecl>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} 
rule: 
matching: closecubr [closecubr, }, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
rule: 
matching: semi [semi, ;, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
rule: 
skipping
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <classDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function 
rule: 
<multiClassDeclOrFuncDef>: <classDeclOrFuncDef> <multiClassDeclOrFuncDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function 
rule: 
<classDeclOrFuncDef>: <funcDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHead> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function 
rule: 
<funcDef>: <funcHead> <funcBody> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id function 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function 
rule: 
<funcHead>: function id <funcHeadFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function 
rule: 
matching: function [function, function, 22]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL 
rule: 
matching: id [id, POLYNOMIAL, 22]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowingFuncOrCons> scopeop 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: 
rule: 
<funcHeadFollowing>: scopeop <funcHeadFollowingFuncOrCons> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowingFuncOrCons> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: 
rule: 
matching: scopeop [scopeop, ::, 22]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> openpar id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate 
rule: 
<funcHeadFollowingFuncOrCons>: id openpar <fParams> closepar returntype <returnType> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate 
rule: 
matching: id [id, evaluate, 22]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( 
rule: 
matching: openpar [openpar, (, 22]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x 
rule: 
<fParams>: id colon <type> <multiArraySize> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x 
rule: 
matching: id [id, x, 22]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : 
rule: 
matching: colon [colon, :, 22]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float 
rule: 
matching: float [float, float, 22]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) 
rule: 
<multiFParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) 
rule: 
matching: closepar [closepar, ), 22]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => 
rule: 
matching: returntype [returntype, =>, 22]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
rule: 
<returnType>: <type> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
rule: 
matching: float [float, float, 22]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> opencubr 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
rule: 
<funcBody>: opencubr <multiLocalVarDeclOrStmt> closecubr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
rule: 
matching: opencubr [opencubr, {, 23]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <expr> openpar return 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return 
rule: 
<statement>: return openpar <expr> closepar semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <expr> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return 
rule: 
matching: return [return, return, 24]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 
rule: 
matching: openpar [openpar, (, 24]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 
rule: 
matching: intnum [intnum, 0, 24]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) 
rule: 
matching: closepar [closepar, ), 24]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
rule: 
matching: semi [semi, ;, 24]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
rule: 
<multiLocalVarDeclOrStmt>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
rule: 
matching: closecubr [closecubr, }, 25]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <classDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function 
rule: 
<multiClassDeclOrFuncDef>: <classDeclOrFuncDef> <multiClassDeclOrFuncDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function 
rule: 
<classDeclOrFuncDef>: <funcDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHead> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function 
rule: 
<funcDef>: <funcHead> <funcBody> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id function 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function 
rule: 
<funcHead>: function id <funcHeadFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function 
rule: 
matching: function [function, function, 27]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC 
rule: 
matching: id [id, QUADRATIC, 27]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowingFuncOrCons> scopeop 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: 
rule: 
<funcHeadFollowing>: scopeop <funcHeadFollowingFuncOrCons> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowingFuncOrCons> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: 
rule: 
matching: scopeop [scopeop, ::, 27]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> openpar id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate 
rule: 
<funcHeadFollowingFuncOrCons>: id openpar <fParams> closepar returntype <returnType> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate 
rule: 
matching: id [id, evaluate, 27]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( 
rule: 
matching: openpar [openpar, (, 27]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x 
rule: 
<fParams>: id colon <type> <multiArraySize> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x 
rule: 
matching: id [id, x, 27]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : 
rule: 
matching: colon [colon, :, 27]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float 
rule: 
matching: float [float, float, 27]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) 
rule: 
<multiFParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) 
rule: 
matching: closepar [closepar, ), 27]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => 
rule: 
matching: returntype [returntype, =>, 27]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
rule: 
<returnType>: <type> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
rule: 
matching: float [float, float, 27]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> opencubr 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
rule: 
<funcBody>: opencubr <multiLocalVarDeclOrStmt> closecubr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
rule: 
matching: opencubr [opencubr, {, 28]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar 
rule: 
<localVarDeclOrStmt>: <localVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id localvar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar 
rule: 
<localVarDecl>: localvar id colon <type> <localVarDeclFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar 
rule: 
matching: localvar [localvar, localvar, 29]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result 
rule: 
matching: id [id, result, 29]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : 
rule: 
matching: colon [colon, :, 29]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float 
rule: 
matching: float [float, float, 29]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
rule: 
<localVarDeclFollowing>: <multiArraySize> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
rule: 
matching: semi [semi, ;, 29]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
rule: 
skipping
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result 
rule: 
matching: id [id, result, 31]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = 
rule: 
matching: assign [assign, =, 31]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a 
rule: 
matching: id [id, a, 31]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
rule: 
matching: semi [semi, ;, 31]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result 
rule: 
matching: id [id, result, 32]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = 
rule: 
matching: assign [assign, =, 32]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result 
rule: 
matching: id [id, result, 32]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> <multOp> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * 
rule: 
<rightrecTerm>: <multOp> <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> mult 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * 
rule: 
<multOp>: mult 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * 
rule: 
matching: mult [mult, *, 32]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x 
rule: 
matching: id [id, x, 32]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> <addOp> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + 
rule: 
<rightrecArithExpr>: <addOp> <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> plus 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + 
rule: 
<addOp>: plus 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + 
rule: 
matching: plus [plus, +, 32]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b 
rule: 
matching: id [id, b, 32]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
rule: 
matching: semi [semi, ;, 32]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result 
rule: 
matching: id [id, result, 33]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = 
rule: 
matching: assign [assign, =, 33]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result 
rule: 
matching: id [id, result, 33]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> <multOp> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * 
rule: 
<rightrecTerm>: <multOp> <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> mult 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * 
rule: 
<multOp>: mult 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * 
rule: 
matching: mult [mult, *, 33]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x 
rule: 
matching: id [id, x, 33]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> <addOp> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + 
rule: 
<rightrecArithExpr>: <addOp> <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> plus 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + 
rule: 
<addOp>: plus 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + 
rule: 
matching: plus [plus, +, 33]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c 
rule: 
matching: id [id, c, 33]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
rule: 
matching: semi [semi, ;, 33]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <expr> openpar return 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return 
rule: 
<statement>: return openpar <expr> closepar semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <expr> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return 
rule: 
matching: return [return, return, 34]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( 
rule: 
matching: openpar [openpar, (, 34]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result 
rule: 
matching: id [id, result, 34]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) 
rule: 
matching: closepar [closepar, ), 34]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
rule: 
matching: semi [semi, ;, 34]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
rule: 
<multiLocalVarDeclOrStmt>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
rule: 
matching: closecubr [closecubr, }, 35]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <classDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function 
rule: 
<multiClassDeclOrFuncDef>: <classDeclOrFuncDef> <multiClassDeclOrFuncDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function 
rule: 
<classDeclOrFuncDef>: <funcDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHead> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function 
rule: 
<funcDef>: <funcHead> <funcBody> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id function 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function 
rule: 
<funcHead>: function id <funcHeadFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function 
rule: 
matching: function [function, function, 37]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC 
rule: 
matching: id [id, QUADRATIC, 37]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowingFuncOrCons> scopeop 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: 
rule: 
<funcHeadFollowing>: scopeop <funcHeadFollowingFuncOrCons> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowingFuncOrCons> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: 
rule: 
matching: scopeop [scopeop, ::, 37]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <fParams> openpar constructor 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor 
rule: 
<funcHeadFollowingFuncOrCons>: constructor openpar <fParams> closepar 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <fParams> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor 
rule: 
matching: constructor [constructor, constructor, 37]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <fParams> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( 
rule: 
matching: openpar [openpar, (, 37]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A 
rule: 
<fParams>: id colon <type> <multiArraySize> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A 
rule: 
matching: id [id, A, 37]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : 
rule: 
matching: colon [colon, :, 37]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float 
rule: 
matching: float [float, float, 37]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <fParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , 
rule: 
<multiFParamsTail>: <fParamsTail> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> <type> colon id comma 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , 
rule: 
<fParamsTail>: comma id colon <type> <multiArraySize> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , 
rule: 
matching: comma [comma, ,, 37]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B 
rule: 
matching: id [id, B, 37]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : 
rule: 
matching: colon [colon, :, 37]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float 
rule: 
matching: float [float, float, 37]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <fParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , 
rule: 
<multiFParamsTail>: <fParamsTail> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> <type> colon id comma 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , 
rule: 
<fParamsTail>: comma id colon <type> <multiArraySize> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , 
rule: 
matching: comma [comma, ,, 37]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C 
rule: 
matching: id [id, C, 37]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : 
rule: 
matching: colon [colon, :, 37]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float 
rule: 
matching: float [float, float, 37]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
rule: 
<multiFParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
rule: 
matching: closepar [closepar, ), 37]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> opencubr 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
rule: 
<funcBody>: opencubr <multiLocalVarDeclOrStmt> closecubr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
rule: 
matching: opencubr [opencubr, {, 38]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self 
rule: 
matching: id [self, self, 39]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> id dot 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . 
rule: 
<multiIdnest>: dot id <idnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . 
rule: 
matching: dot [dot, ., 39]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a 
rule: 
matching: id [id, a, 39]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = 
rule: 
matching: assign [assign, =, 39]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A 
rule: 
matching: id [id, A, 39]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
rule: 
matching: semi [semi, ;, 39]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self 
rule: 
matching: id [self, self, 40]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> id dot 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . 
rule: 
<multiIdnest>: dot id <idnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . 
rule: 
matching: dot [dot, ., 40]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b 
rule: 
matching: id [id, b, 40]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = 
rule: 
matching: assign [assign, =, 40]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B 
rule: 
matching: id [id, B, 40]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
rule: 
matching: semi [semi, ;, 40]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self 
rule: 
matching: id [self, self, 41]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> id dot 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . 
rule: 
<multiIdnest>: dot id <idnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . 
rule: 
matching: dot [dot, ., 41]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c 
rule: 
matching: id [id, c, 41]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = 
rule: 
matching: assign [assign, =, 41]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C 
rule: 
matching: id [id, C, 41]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
rule: 
matching: semi [semi, ;, 41]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
rule: 
<multiLocalVarDeclOrStmt>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
rule: 
matching: closecubr [closecubr, }, 42]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <classDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function 
rule: 
<multiClassDeclOrFuncDef>: <classDeclOrFuncDef> <multiClassDeclOrFuncDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function 
rule: 
<classDeclOrFuncDef>: <funcDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHead> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function 
rule: 
<funcDef>: <funcHead> <funcBody> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id function 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function 
rule: 
<funcHead>: function id <funcHeadFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function 
rule: 
matching: function [function, function, 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR 
rule: 
matching: id [id, LINEAR, 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowingFuncOrCons> scopeop 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: 
rule: 
<funcHeadFollowing>: scopeop <funcHeadFollowingFuncOrCons> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowingFuncOrCons> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: 
rule: 
matching: scopeop [scopeop, ::, 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <fParams> openpar constructor 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor 
rule: 
<funcHeadFollowingFuncOrCons>: constructor openpar <fParams> closepar 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <fParams> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor 
rule: 
matching: constructor [constructor, constructor, 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <fParams> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( 
rule: 
matching: openpar [openpar, (, 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A 
rule: 
<fParams>: id colon <type> <multiArraySize> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A 
rule: 
matching: id [id, A, 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : 
rule: 
matching: colon [colon, :, 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float 
rule: 
matching: float [float, float, 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <fParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , 
rule: 
<multiFParamsTail>: <fParamsTail> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> <type> colon id comma 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , 
rule: 
<fParamsTail>: comma id colon <type> <multiArraySize> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , 
rule: 
matching: comma [comma, ,, 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B 
rule: 
matching: id [id, B, 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : 
rule: 
matching: colon [colon, :, 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float 
rule: 
matching: float [float, float, 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar <multiFParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
rule: 
<multiFParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
rule: 
matching: closepar [closepar, ), 44]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> opencubr 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
rule: 
<funcBody>: opencubr <multiLocalVarDeclOrStmt> closecubr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
rule: 
matching: opencubr [opencubr, {, 45]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self 
rule: 
matching: id [self, self, 46]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> id dot 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . 
rule: 
<multiIdnest>: dot id <idnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . 
rule: 
matching: dot [dot, ., 46]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a 
rule: 
matching: id [id, a, 46]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = 
rule: 
matching: assign [assign, =, 46]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A 
rule: 
matching: id [id, A, 46]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
rule: 
matching: semi [semi, ;, 46]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self 
rule: 
matching: id [self, self, 47]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> id dot 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . 
rule: 
<multiIdnest>: dot id <idnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . 
rule: 
matching: dot [dot, ., 47]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b 
rule: 
matching: id [id, b, 47]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = 
rule: 
matching: assign [assign, =, 47]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B 
rule: 
matching: id [id, B, 47]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
rule: 
matching: semi [semi, ;, 47]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
rule: 
<multiLocalVarDeclOrStmt>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
rule: 
matching: closecubr [closecubr, }, 48]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <classDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function 
rule: 
<multiClassDeclOrFuncDef>: <classDeclOrFuncDef> <multiClassDeclOrFuncDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function 
rule: 
<classDeclOrFuncDef>: <funcDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHead> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function 
rule: 
<funcDef>: <funcHead> <funcBody> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id function 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function 
rule: 
<funcHead>: function id <funcHeadFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function 
rule: 
matching: function [function, function, 50]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR 
rule: 
matching: id [id, LINEAR, 50]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowingFuncOrCons> scopeop 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: 
rule: 
<funcHeadFollowing>: scopeop <funcHeadFollowingFuncOrCons> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowingFuncOrCons> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: 
rule: 
matching: scopeop [scopeop, ::, 50]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> openpar id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate 
rule: 
<funcHeadFollowingFuncOrCons>: id openpar <fParams> closepar returntype <returnType> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate 
rule: 
matching: id [id, evaluate, 50]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( 
rule: 
matching: openpar [openpar, (, 50]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x 
rule: 
<fParams>: id colon <type> <multiArraySize> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x 
rule: 
matching: id [id, x, 50]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : 
rule: 
matching: colon [colon, :, 50]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float 
rule: 
matching: float [float, float, 50]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <multiFParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) 
rule: 
<multiFParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) 
rule: 
matching: closepar [closepar, ), 50]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => 
rule: 
matching: returntype [returntype, =>, 50]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
rule: 
<returnType>: <type> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
rule: 
matching: float [float, float, 50]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> opencubr 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
rule: 
<funcBody>: opencubr <multiLocalVarDeclOrStmt> closecubr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
rule: 
matching: opencubr [opencubr, {, 51]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar 
rule: 
<localVarDeclOrStmt>: <localVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id localvar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar 
rule: 
<localVarDecl>: localvar id colon <type> <localVarDeclFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar 
rule: 
matching: localvar [localvar, localvar, 52]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result 
rule: 
matching: id [id, result, 52]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : 
rule: 
matching: colon [colon, :, 52]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> float 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float 
rule: 
matching: float [float, float, 52]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
rule: 
<localVarDeclFollowing>: <multiArraySize> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
rule: 
matching: semi [semi, ;, 52]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result 
rule: 
matching: id [id, result, 53]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 
rule: 
matching: assign [assign, =, 53]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> floatnum 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 
rule: 
<factor>: floatnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 
rule: 
matching: floatnum [floatnum, 0.0, 53]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
rule: 
matching: semi [semi, ;, 53]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result 
rule: 
matching: id [id, result, 54]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> <assignOp> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> assign 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = 
rule: 
matching: assign [assign, =, 54]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a 
rule: 
matching: id [id, a, 54]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> <multOp> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * 
rule: 
<rightrecTerm>: <multOp> <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> mult 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * 
rule: 
<multOp>: mult 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * 
rule: 
matching: mult [mult, *, 54]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x 
rule: 
matching: id [id, x, 54]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> <addOp> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + 
rule: 
<rightrecArithExpr>: <addOp> <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> plus 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + 
rule: 
<addOp>: plus 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + 
rule: 
matching: plus [plus, +, 54]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b 
rule: 
matching: id [id, b, 54]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
rule: 
matching: semi [semi, ;, 54]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <expr> openpar return 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return 
rule: 
<statement>: return openpar <expr> closepar semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <expr> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return 
rule: 
matching: return [return, return, 55]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( 
rule: 
matching: openpar [openpar, (, 55]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result 
rule: 
matching: id [id, result, 55]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) 
rule: 
matching: closepar [closepar, ), 55]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
rule: 
matching: semi [semi, ;, 55]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
rule: 
<multiLocalVarDeclOrStmt>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
rule: 
matching: closecubr [closecubr, }, 56]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
rule: 
skipping
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <classDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function 
rule: 
<multiClassDeclOrFuncDef>: <classDeclOrFuncDef> <multiClassDeclOrFuncDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function 
rule: 
<classDeclOrFuncDef>: <funcDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHead> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function 
rule: 
<funcDef>: <funcHead> <funcBody> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id function 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function 
rule: 
<funcHead>: function id <funcHeadFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function 
rule: 
matching: function [function, function, 59]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main 
rule: 
matching: id [id, main, 59]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( 
rule: 
<funcHeadFollowing>: openpar <fParams> closepar returntype <returnType> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( 
rule: 
matching: openpar [openpar, (, 59]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) 
rule: 
<fParams>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) 
rule: 
matching: closepar [closepar, ), 59]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => 
rule: 
matching: returntype [returntype, =>, 59]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> void 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
rule: 
<returnType>: void 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
rule: 
matching: void [void, void, 59]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> opencubr 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
rule: 
<funcBody>: opencubr <multiLocalVarDeclOrStmt> closecubr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
rule: 
matching: opencubr [opencubr, {, 60]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar 
rule: 
<localVarDeclOrStmt>: <localVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id localvar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar 
rule: 
<localVarDecl>: localvar id colon <type> <localVarDeclFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar 
rule: 
matching: localvar [localvar, localvar, 61]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 
rule: 
matching: id [id, f1, 61]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : 
rule: 
matching: colon [colon, :, 61]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR 
rule: 
<type>: id 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR 
rule: 
matching: id [id, LINEAR, 61]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <aParams> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 
rule: 
<localVarDeclFollowing>: openpar <aParams> closepar semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <aParams> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 
rule: 
matching: openpar [openpar, (, 61]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 
rule: 
<aParams>: <expr> <multiAParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 
rule: 
matching: intnum [intnum, 2, 61]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <aParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 
rule: 
<multiAParamsTail>: <aParamsTail> <multiAParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <expr> comma 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 
rule: 
<aParamsTail>: comma <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 
rule: 
matching: comma [comma, ,, 61]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> floatnum 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 
rule: 
<factor>: floatnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 
rule: 
matching: floatnum [floatnum, 3.5, 61]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) 
rule: 
<multiAParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) 
rule: 
matching: closepar [closepar, ), 61]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
rule: 
matching: semi [semi, ;, 61]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar 
rule: 
<localVarDeclOrStmt>: <localVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id localvar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar 
rule: 
<localVarDecl>: localvar id colon <type> <localVarDeclFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar 
rule: 
matching: localvar [localvar, localvar, 62]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 
rule: 
matching: id [id, f2, 62]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : 
rule: 
matching: colon [colon, :, 62]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC 
rule: 
<type>: id 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC 
rule: 
matching: id [id, QUADRATIC, 62]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <aParams> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( 
rule: 
<localVarDeclFollowing>: openpar <aParams> closepar semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <aParams> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( 
rule: 
matching: openpar [openpar, (, 62]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 
rule: 
<aParams>: <expr> <multiAParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> <sign> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 
rule: 
<factor>: <sign> <factor> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> minus 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 
rule: 
<sign>: minus 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 
rule: 
matching: minus [minus, -, 62]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> floatnum 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 
rule: 
<factor>: floatnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 
rule: 
matching: floatnum [floatnum, 2.0, 62]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <aParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 
rule: 
<multiAParamsTail>: <aParamsTail> <multiAParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <expr> comma 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 
rule: 
<aParamsTail>: comma <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 
rule: 
matching: comma [comma, ,, 62]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> floatnum 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 
rule: 
<factor>: floatnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 
rule: 
matching: floatnum [floatnum, 1.0, 62]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <aParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 
rule: 
<multiAParamsTail>: <aParamsTail> <multiAParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <expr> comma 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 
rule: 
<aParamsTail>: comma <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 
rule: 
matching: comma [comma, ,, 62]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> floatnum 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 
rule: 
<factor>: floatnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 
rule: 
matching: floatnum [floatnum, 0.0, 62]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <multiAParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) 
rule: 
<multiAParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) 
rule: 
matching: closepar [closepar, ), 62]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
rule: 
matching: semi [semi, ;, 62]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDecl> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar 
rule: 
<localVarDeclOrStmt>: <localVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id localvar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar 
rule: 
<localVarDecl>: localvar id colon <type> <localVarDeclFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar 
rule: 
matching: localvar [localvar, localvar, 63]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> colon 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter 
rule: 
matching: id [id, counter, 63]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> <type> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : 
rule: 
matching: colon [colon, :, 63]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> integer 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer 
rule: 
<type>: integer 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer 
rule: 
matching: integer [integer, integer, 63]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 
rule: 
scan
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 
rule: 
scan
-----------------------------------------------------------------------
Syntax error detected, skipping token: 
= 1 
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <multiArraySize> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
rule: 
<localVarDeclFollowing>: <multiArraySize> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
rule: 
matching: semi [semi, ;, 63]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <relExpr> openpar while 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while 
rule: 
<statement>: while openpar <relExpr> closepar <statBlock> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <relExpr> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while 
rule: 
matching: while [while, while, 65]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <relExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( 
rule: 
matching: openpar [openpar, (, 65]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter 
rule: 
<relExpr>: <arithExpr> <relOp> <arithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter 
rule: 
matching: id [id, counter, 65]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> leq 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 
rule: 
<relOp>: leq 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 
rule: 
matching: leq [leq, <=, 65]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> intnum 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 
rule: 
matching: intnum [intnum, 10, 65]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
rule: 
matching: closepar [closepar, ), 65]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> opencubr 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
rule: 
<statBlock>: opencubr <multiStatement> closecubr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
rule: 
matching: opencubr [opencubr, {, 66]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> <statement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write 
rule: 
<multiStatement>: <statement> <multiStatement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <expr> openpar write 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write 
rule: 
<statement>: write openpar <expr> closepar semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <expr> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write 
rule: 
matching: write [write, write, 67]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( 
rule: 
matching: openpar [openpar, (, 67]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter 
rule: 
matching: id [id, counter, 67]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) 
rule: 
matching: closepar [closepar, ), 67]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
rule: 
matching: semi [semi, ;, 67]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> <statement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write 
rule: 
<multiStatement>: <statement> <multiStatement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <expr> openpar write 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write 
rule: 
<statement>: write openpar <expr> closepar semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <expr> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write 
rule: 
matching: write [write, write, 68]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( 
rule: 
matching: openpar [openpar, (, 68]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 
rule: 
matching: id [id, f1, 68]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> id dot 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . 
rule: 
<multiIdnest>: dot id <idnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . 
rule: 
matching: dot [dot, ., 68]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate 
rule: 
matching: id [id, evaluate, 68]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <aParams> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( 
rule: 
<idnestFollowing>: openpar <aParams> closepar 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <aParams> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( 
rule: 
matching: openpar [openpar, (, 68]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter 
rule: 
<aParams>: <expr> <multiAParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter 
rule: 
matching: id [id, counter, 68]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) 
rule: 
<multiAParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) 
rule: 
matching: closepar [closepar, ), 68]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) 
rule: 
matching: closepar [closepar, ), 68]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
rule: 
matching: semi [semi, ;, 68]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> <statement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write 
rule: 
<multiStatement>: <statement> <multiStatement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <expr> openpar write 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write 
rule: 
<statement>: write openpar <expr> closepar semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <expr> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write 
rule: 
matching: write [write, write, 69]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( 
rule: 
matching: openpar [openpar, (, 69]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 
rule: 
matching: id [id, f2, 69]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> id dot 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . 
rule: 
<multiIdnest>: dot id <idnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . 
rule: 
matching: dot [dot, ., 69]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate 
rule: 
matching: id [id, evaluate, 69]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <aParams> openpar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( 
rule: 
<idnestFollowing>: openpar <aParams> closepar 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <aParams> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( 
rule: 
matching: openpar [openpar, (, 69]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <expr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter 
rule: 
<aParams>: <expr> <multiAParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <arithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <term> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter 
rule: 
matching: id [id, counter, 69]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) 
rule: 
<multiAParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) 
rule: 
matching: closepar [closepar, ), 69]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) ) 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> <rightrecArithExpr> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <exprFollowing> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) ) 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) ) 
rule: 
matching: closepar [closepar, ), 69]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) ) ; 
rule: 
matching: semi [semi, ;, 69]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) ) ; 
} 
rule: 
<multiStatement>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) ) ; 
} 
rule: 
matching: closecubr [closecubr, }, 70]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) ) ; 
} ; 
rule: 
matching: semi [semi, ;, 70]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) ) ; 
} ; 
} 
rule: 
<multiLocalVarDeclOrStmt>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) ) ; 
} ; 
} 
rule: 
matching: closecubr [closecubr, }, 71]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) ) ; 
} ; 
} 
/* 
    classes 
    -------------------------------------- 
| | no class declaration 
| | class declaration 
|X| multiple class declarations 
|X| no data member declaration 
|X| data member declaration 
|X| multiple data member declaration 
| | no member function declaration 
|X| member function declaration 
|X| multiple member function declaration 
| | no member 
|X| no inherited class 
|X| one inherited class 
| | multiple inherited classes 
|X| private member specifier 
|X| public member specifier 
 
    functions: definitions 
    -------------------------------------- 
| | no main function definition 
|X| main function definition 
|X| no free function definition 
| | free function definition 
| | multiple free function definitions 
| | no member function definition 
|X| member function definition 
|X| multiple member function definitions 
| | return type: void 
| | return type: integer 
|X| return type: float 
|X| return type: id 
| | return type: array (not allowed) 
 
    functions: formal parameters 
    -------------------------------------- 
| | type: integer 
|X| type: float 
| | type: id 
| | type: 1-dim array  
| | type: n-dim array 
| | type: array (with size) 
| | type: array (without size) 
 
    functions: calls 
    -------------------------------------- 
| | free function call 
|X| member function call 
| | parameters:0 
|X| parameters:1 
|X| parameters:n 
| | array parameter - 1-dim 
| | array parameter - n-dim 
| | array parameter - with size 
| | array parameter - without size 
| | function call as statement 
|X| function call as expression factor 
| | expression as parameter 
 
    variable declaration 
    -------------------------------------- 
| | type: integer 
| | type: float 
| | type: string 
|X| type: id 
| | type: 1-dim array  
| | type: n-dim array 
| | type: array (with size) 
| | type: array (without size) 
 
    function body: local variable declarations 
    -------------------------------------- 
| | no local variable declarations 
|X| local variable declarations 
| | intertwined statements and variable declarations 
 
    function body: statements 
    -------------------------------------- 
| | no statement 
| | 1 statement 
|X| n statements 
| | if statement 
| | if: empty then or else blocks 
| | if: 1-statement then or else blocks 
| | if: n-statements then or else blocks 
|X| while statement 
| | while: empty block 
| | while: 1-statement block 
|X| while: n-statement block 
| | read(<variable>) statement 
|X| write(<expr>) statement 
|X| return(<expr>) statement 
|X| assignment statement 
 
    variable + idnest 
    -------------------------------------- 
|X| id 
|X| id.id 
|X| id.id(id) 
| | id(id).id 
| | id(id).id() 
| | id.id[id] 
| | id[id].id 
| | id[id].id[id] 
| | id.id[id][id] 
| | id[id][id].id 
| | id[id][id].id[id][id] 
| | id(id).id[id] 
| | id(id).id[id][id] 
| | expression as array index 
 
    expressions 
    -------------------------------------- 
| | single variable 
| | involving addop 
| | involving multop 
| | involving relop 
|X| involving addop + multop 
| | involving multop + relop 
| | involving addop + multop + relop 
| | involving parentheses 
| | involving nested parenhteses 
| | involving not 
| | involving sign 
| | involving literals 
|X| involving variable + idnest 
|X| involving function calls 
| | involving all the above in one expression 
*/ 
rule: 
skipping
-----------------------------------------------------------------------
stack: 
<$> 
input: 

class POLYNOMIAL { 
public function evaluate : ( x : float ) => float ; 
} ; 
class LINEAR isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
public constructor : ( A : float , B : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
class QUADRATIC isa POLYNOMIAL { 
private attribute a : float ; 
private attribute b : float ; 
private attribute c : float ; 
public constructor : ( A : float , B : float , C : float ) ; 
public function evaluate : ( x : float ) => float ; 
} ; 
// ====== member function implementations ====== //    
function POLYNOMIAL :: evaluate ( x : float ) => float 
{ 
return ( 0 ) ; 
} 
function QUADRATIC :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
//Using Horner's method  
result = a ; 
result = result * x + b ; 
result = result * x + c ; 
return ( result ) ; 
} 
function QUADRATIC :: constructor ( A : float , B : float , C : float ) 
{ 
self . a = A ; 
self . b = B ; 
self . c = C ; 
} 
function LINEAR :: constructor ( A : float , B : float ) 
{ 
self . a = A ; 
self . b = B ; 
} 
function LINEAR :: evaluate ( x : float ) => float 
{ 
localvar result : float ; 
result = 0.0 ; 
result = a * x + b ; 
return ( result ) ; 
} 
// ====== main ====== //  
function main ( ) => void 
{ 
localvar f1 : LINEAR ( 2 , 3.5 ) ; 
localvar f2 : QUADRATIC ( - 2.0 , 1.0 , 0.0 ) ; 
localvar counter : integer = 1 ; 
while ( counter <= 10 ) 
{ 
write ( counter ) ; 
write ( f1 . evaluate ( counter ) ) ; 
write ( f2 . evaluate ( counter ) ) ; 
} ; 
} 
/* 
    classes 
    -------------------------------------- 
| | no class declaration 
| | class declaration 
|X| multiple class declarations 
|X| no data member declaration 
|X| data member declaration 
|X| multiple data member declaration 
| | no member function declaration 
|X| member function declaration 
|X| multiple member function declaration 
| | no member 
|X| no inherited class 
|X| one inherited class 
| | multiple inherited classes 
|X| private member specifier 
|X| public member specifier 
 
    functions: definitions 
    -------------------------------------- 
| | no main function definition 
|X| main function definition 
|X| no free function definition 
| | free function definition 
| | multiple free function definitions 
| | no member function definition 
|X| member function definition 
|X| multiple member function definitions 
| | return type: void 
| | return type: integer 
|X| return type: float 
|X| return type: id 
| | return type: array (not allowed) 
 
    functions: formal parameters 
    -------------------------------------- 
| | type: integer 
|X| type: float 
| | type: id 
| | type: 1-dim array  
| | type: n-dim array 
| | type: array (with size) 
| | type: array (without size) 
 
    functions: calls 
    -------------------------------------- 
| | free function call 
|X| member function call 
| | parameters:0 
|X| parameters:1 
|X| parameters:n 
| | array parameter - 1-dim 
| | array parameter - n-dim 
| | array parameter - with size 
| | array parameter - without size 
| | function call as statement 
|X| function call as expression factor 
| | expression as parameter 
 
    variable declaration 
    -------------------------------------- 
| | type: integer 
| | type: float 
| | type: string 
|X| type: id 
| | type: 1-dim array  
| | type: n-dim array 
| | type: array (with size) 
| | type: array (without size) 
 
    function body: local variable declarations 
    -------------------------------------- 
| | no local variable declarations 
|X| local variable declarations 
| | intertwined statements and variable declarations 
 
    function body: statements 
    -------------------------------------- 
| | no statement 
| | 1 statement 
|X| n statements 
| | if statement 
| | if: empty then or else blocks 
| | if: 1-statement then or else blocks 
| | if: n-statements then or else blocks 
|X| while statement 
| | while: empty block 
| | while: 1-statement block 
|X| while: n-statement block 
| | read(<variable>) statement 
|X| write(<expr>) statement 
|X| return(<expr>) statement 
|X| assignment statement 
 
    variable + idnest 
    -------------------------------------- 
|X| id 
|X| id.id 
|X| id.id(id) 
| | id(id).id 
| | id(id).id() 
| | id.id[id] 
| | id[id].id 
| | id[id].id[id] 
| | id.id[id][id] 
| | id[id][id].id 
| | id[id][id].id[id][id] 
| | id(id).id[id] 
| | id(id).id[id][id] 
| | expression as array index 
 
    expressions 
    -------------------------------------- 
| | single variable 
| | involving addop 
| | involving multop 
| | involving relop 
|X| involving addop + multop 
| | involving multop + relop 
| | involving addop + multop + relop 
| | involving parentheses 
| | involving nested parenhteses 
| | involving not 
| | involving sign 
| | involving literals 
|X| involving variable + idnest 
|X| involving function calls 
| | involving all the above in one expression 
*/ 
rule: 
<multiClassDeclOrFuncDef>: 
-----------------------------------------------------------------------
