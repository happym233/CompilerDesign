stack: 
<$> <multiClassDeclOrFuncDef> 
input: 
class 
rule: 
<START>: <multiClassDeclOrFuncDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <classDeclOrFuncDef> 
input: 
class 
rule: 
<multiClassDeclOrFuncDef>: <classDeclOrFuncDef> <multiClassDeclOrFuncDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <classDecl> 
input: 
class 
rule: 
<classDeclOrFuncDef>: <classDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <optClassDecl2> id class 
input: 
class 
rule: 
<classDecl>: class id <optClassDecl2> opencubr <multiVisiMemberDecl> closecubr semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <optClassDecl2> id 
input: 
class 
rule: 
matching: class [class, class, 1]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <optClassDecl2> 
input: 
class A 
rule: 
matching: id [id, A, 1]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <multiCommaId> id isa 
input: 
class A isa 
rule: 
<optClassDecl2>: isa id <multiCommaId> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <multiCommaId> id 
input: 
class A isa 
rule: 
matching: isa [isa, isa, 1]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <multiCommaId> 
input: 
class A isa B 
rule: 
matching: id [id, B, 1]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <multiCommaId> id comma 
input: 
class A isa B , 
rule: 
<multiCommaId>: comma id <multiCommaId> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <multiCommaId> id 
input: 
class A isa B , 
rule: 
matching: comma [comma, ,, 1]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <multiCommaId> 
input: 
class A isa B , C 
rule: 
matching: id [id, C, 1]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <multiCommaId> id comma 
input: 
class A isa B , C , 
rule: 
<multiCommaId>: comma id <multiCommaId> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <multiCommaId> id 
input: 
class A isa B , C , 
rule: 
matching: comma [comma, ,, 1]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <multiCommaId> 
input: 
class A isa B , C , D 
rule: 
matching: id [id, D, 1]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <multiCommaId> id comma 
input: 
class A isa B , C , D , 
rule: 
<multiCommaId>: comma id <multiCommaId> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <multiCommaId> id 
input: 
class A isa B , C , D , 
rule: 
matching: comma [comma, ,, 1]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr <multiCommaId> 
input: 
class A isa B , C , D , E 
rule: 
matching: id [id, E, 1]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> opencubr 
input: 
class A isa B , C , D , E { 
rule: 
<multiCommaId>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> 
input: 
class A isa B , C , D , E { 
rule: 
matching: opencubr [opencubr, {, 1]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> <visibility> 
input: 
class A isa B , C , D , E { 
attribute 
rule: 
<multiVisiMemberDecl>: <visibility> <memberDecl> <multiVisiMemberDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> 
input: 
class A isa B , C , D , E { 
attribute 
rule: 
<visibility>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberVarDecl> 
input: 
class A isa B , C , D , E { 
attribute 
rule: 
<memberDecl>: <memberVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon id attribute 
input: 
class A isa B , C , D , E { 
attribute 
rule: 
<memberVarDecl>: attribute id colon <type> <multiArraySize> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon id 
input: 
class A isa B , C , D , E { 
attribute 
rule: 
matching: attribute [attribute, attribute, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon 
input: 
class A isa B , C , D , E { 
attribute c 
rule: 
matching: id [id, c, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> 
input: 
class A isa B , C , D , E { 
attribute c : 
rule: 
matching: colon [colon, :, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> integer 
input: 
class A isa B , C , D , E { 
attribute c : integer 
rule: 
<type>: integer 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> 
input: 
class A isa B , C , D , E { 
attribute c : integer 
rule: 
matching: integer [integer, integer, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
rule: 
matching: semi [semi, ;, 2]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> <visibility> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private 
rule: 
<multiVisiMemberDecl>: <visibility> <memberDecl> <multiVisiMemberDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> private 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private 
rule: 
<visibility>: private 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private 
rule: 
matching: private [private, private, 3]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberVarDecl> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute 
rule: 
<memberDecl>: <memberVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon id attribute 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute 
rule: 
<memberVarDecl>: attribute id colon <type> <multiArraySize> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute 
rule: 
matching: attribute [attribute, attribute, 3]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b 
rule: 
matching: id [id, b, 3]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : 
rule: 
matching: colon [colon, :, 3]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> float 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float 
rule: 
matching: float [float, float, 3]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
rule: 
matching: semi [semi, ;, 3]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> <visibility> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public 
rule: 
<multiVisiMemberDecl>: <visibility> <memberDecl> <multiVisiMemberDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> public 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public 
rule: 
<visibility>: public 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public 
rule: 
matching: public [public, public, 4]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberVarDecl> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute 
rule: 
<memberDecl>: <memberVarDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon id attribute 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute 
rule: 
<memberVarDecl>: attribute id colon <type> <multiArraySize> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute 
rule: 
matching: attribute [attribute, attribute, 4]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> colon 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d 
rule: 
matching: id [id, d, 4]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> <type> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : 
rule: 
matching: colon [colon, :, 4]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E 
rule: 
<type>: id 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi <multiArraySize> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E 
rule: 
matching: id [id, E, 4]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
rule: 
matching: semi [semi, ;, 4]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> <visibility> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public 
rule: 
<multiVisiMemberDecl>: <visibility> <memberDecl> <multiVisiMemberDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> public 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public 
rule: 
<visibility>: public 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberDecl> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public 
rule: 
matching: public [public, public, 5]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> <memberFuncDecl> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor 
rule: 
<memberDecl>: <memberFuncDecl> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <fParams> openpar colon constructor 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor 
rule: 
<memberFuncDecl>: constructor colon openpar <fParams> closepar semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <fParams> openpar colon 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor 
rule: 
matching: constructor [constructor, constructor, 5]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <fParams> openpar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : 
rule: 
matching: colon [colon, :, 5]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <fParams> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( 
rule: 
matching: openpar [openpar, (, 5]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A 
rule: 
<fParams>: id colon <type> <multiArraySize> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A 
rule: 
matching: id [id, A, 5]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : 
rule: 
matching: colon [colon, :, 5]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> float 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float 
rule: 
matching: float [float, float, 5]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <fParamsTail> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , 
rule: 
<multiFParamsTail>: <fParamsTail> <multiFParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> colon id comma 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , 
rule: 
<fParamsTail>: comma id colon <type> <multiArraySize> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> colon id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , 
rule: 
matching: comma [comma, ,, 5]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> colon 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B 
rule: 
matching: id [id, B, 5]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> <type> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : 
rule: 
matching: colon [colon, :, 5]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> float 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float 
rule: 
<type>: float 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> <multiArraySize> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float 
rule: 
matching: float [float, float, 5]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar <multiFParamsTail> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) 
rule: 
<multiArraySize>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi closepar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) 
rule: 
<multiFParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> semi 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) 
rule: 
matching: closepar [closepar, ), 5]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr <multiVisiMemberDecl> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
rule: 
matching: semi [semi, ;, 5]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi closecubr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} 
rule: 
<multiVisiMemberDecl>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> semi 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} 
rule: 
matching: closecubr [closecubr, }, 6]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
rule: 
matching: semi [semi, ;, 6]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <classDeclOrFuncDef> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function 
rule: 
<multiClassDeclOrFuncDef>: <classDeclOrFuncDef> <multiClassDeclOrFuncDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcDef> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function 
rule: 
<classDeclOrFuncDef>: <funcDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHead> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function 
rule: 
<funcDef>: <funcHead> <funcBody> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id function 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function 
rule: 
<funcHead>: function id <funcHeadFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function 
rule: 
matching: function [function, function, 8]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A 
rule: 
matching: id [id, A, 8]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowingFuncOrCons> scopeop 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: 
rule: 
<funcHeadFollowing>: scopeop <funcHeadFollowingFuncOrCons> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowingFuncOrCons> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: 
rule: 
matching: scopeop [scopeop, ::, 8]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> openpar id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction 
rule: 
<funcHeadFollowingFuncOrCons>: id openpar <fParams> closepar returntype <returnType> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> openpar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction 
rule: 
matching: id [id, ifFunction, 8]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( 
rule: 
matching: openpar [openpar, (, 8]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) 
rule: 
<fParams>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) 
rule: 
matching: closepar [closepar, ), 8]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => 
rule: 
matching: returntype [returntype, =>, 8]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> void 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
rule: 
<returnType>: void 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
rule: 
matching: void [void, void, 8]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> opencubr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
rule: 
<funcBody>: opencubr <multiLocalVarDeclOrStmt> closecubr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
rule: 
matching: opencubr [opencubr, {, 9]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar <relExpr> openpar if 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if 
rule: 
<statement>: if openpar <relExpr> closepar then <statBlock> else <statBlock> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar <relExpr> openpar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if 
rule: 
matching: if [if, if, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar <relExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( 
rule: 
matching: openpar [openpar, (, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a 
rule: 
<relExpr>: <arithExpr> <relOp> <arithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a 
rule: 
matching: id [id, a, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar <arithExpr> <relOp> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar <arithExpr> lt 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 
rule: 
<relOp>: lt 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 
rule: 
matching: lt [lt, <, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> intnum 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 
rule: 
matching: intnum [intnum, 1, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then closepar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> then 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) 
rule: 
matching: closepar [closepar, ), 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else <statBlock> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then 
rule: 
matching: then [then, then, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else closecubr <multiStatement> opencubr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
rule: 
<statBlock>: opencubr <multiStatement> closecubr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else closecubr <multiStatement> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
rule: 
matching: opencubr [opencubr, {, 10]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else closecubr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} 
rule: 
<multiStatement>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> else 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} 
rule: 
matching: closecubr [closecubr, }, 11]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else 
rule: 
matching: else [else, else, 11]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> opencubr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
rule: 
<statBlock>: opencubr <multiStatement> closecubr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
rule: 
matching: opencubr [opencubr, {, 11]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> <statement> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a 
rule: 
<multiStatement>: <statement> <multiStatement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a 
rule: 
<statement>: id <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a 
rule: 
matching: id [id, a, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> closepar <aParams> openpar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( 
rule: 
<idnestFollowing>: openpar <aParams> closepar 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> closepar <aParams> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( 
rule: 
matching: openpar [openpar, (, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <expr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b 
rule: 
<aParams>: <expr> <multiAParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b 
rule: 
matching: id [id, b, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> closepar <multiAParamsTail> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> closepar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) 
rule: 
<multiAParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) 
rule: 
matching: closepar [closepar, ), 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> id dot 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . 
rule: 
<multiIdnest>: dot id <idnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . 
rule: 
matching: dot [dot, ., 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c 
rule: 
matching: id [id, c, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> <indice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 
rule: 
matching: opensqbr [opensqbr, [, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> intnum 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 
rule: 
matching: intnum [intnum, 1, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] 
rule: 
matching: closesqbr [closesqbr, ], 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> <indice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ 
rule: 
matching: opensqbr [opensqbr, [, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e 
rule: 
matching: id [id, e, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> closesqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <multiIndice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] 
rule: 
matching: closesqbr [closesqbr, ], 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <functionCallOrAssignStat> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <expr> <assignOp> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <expr> assign 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = 
rule: 
<assignOp>: assign 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <expr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = 
rule: 
matching: assign [assign, =, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a 
rule: 
matching: id [id, a, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> <indice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 
rule: 
matching: opensqbr [opensqbr, [, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> intnum 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 
rule: 
matching: intnum [intnum, 2, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] 
rule: 
matching: closesqbr [closesqbr, ], 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> <indice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 
rule: 
matching: opensqbr [opensqbr, [, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> intnum 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 
rule: 
matching: intnum [intnum, 1, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] 
rule: 
matching: closesqbr [closesqbr, ], 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> id dot 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . 
rule: 
<multiIdnest>: dot id <idnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . 
rule: 
matching: dot [dot, ., 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b 
rule: 
matching: id [id, b, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> <indice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 
rule: 
matching: opensqbr [opensqbr, [, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> intnum 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 
rule: 
matching: intnum [intnum, 3, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] 
rule: 
matching: closesqbr [closesqbr, ], 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> <indice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 
rule: 
matching: opensqbr [opensqbr, [, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> intnum 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 
rule: 
matching: intnum [intnum, 4, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] 
rule: 
matching: closesqbr [closesqbr, ], 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <term> <addOp> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + 
rule: 
<rightrecArithExpr>: <addOp> <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <term> plus 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + 
rule: 
<addOp>: plus 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + 
rule: 
matching: plus [plus, +, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c 
rule: 
matching: id [id, c, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> id dot 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . 
rule: 
<multiIdnest>: dot id <idnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . 
rule: 
matching: dot [dot, ., 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d 
rule: 
matching: id [id, d, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> <indice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 
rule: 
matching: opensqbr [opensqbr, [, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> intnum 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 
rule: 
matching: intnum [intnum, 3, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] 
rule: 
matching: closesqbr [closesqbr, ], 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> <indice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 
rule: 
matching: opensqbr [opensqbr, [, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> intnum 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 
rule: 
matching: intnum [intnum, 5, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] 
rule: 
matching: closesqbr [closesqbr, ], 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> id dot 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . 
rule: 
<multiIdnest>: dot id <idnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . 
rule: 
matching: dot [dot, ., 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b 
rule: 
matching: id [id, b, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <aParams> openpar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 
rule: 
<idnestFollowing>: openpar <aParams> closepar 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <aParams> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 
rule: 
matching: openpar [openpar, (, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <expr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 
rule: 
<aParams>: <expr> <multiAParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 
rule: 
matching: intnum [intnum, 1, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) 
rule: 
<multiAParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) 
rule: 
matching: closepar [closepar, ), 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi <exprFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
rule: 
matching: semi [semi, ;, 12]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} 
rule: 
<multiStatement>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} 
rule: 
matching: closecubr [closecubr, }, 13]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
rule: 
matching: semi [semi, ;, 13]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <expr> openpar return 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return 
rule: 
<statement>: return openpar <expr> closepar semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <expr> openpar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return 
rule: 
matching: return [return, return, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <expr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 
rule: 
matching: openpar [openpar, (, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 
rule: 
matching: intnum [intnum, 0, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) 
rule: 
matching: closepar [closepar, ), 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
rule: 
matching: semi [semi, ;, 14]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
rule: 
<multiLocalVarDeclOrStmt>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
rule: 
matching: closecubr [closecubr, }, 15]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <classDeclOrFuncDef> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function 
rule: 
<multiClassDeclOrFuncDef>: <classDeclOrFuncDef> <multiClassDeclOrFuncDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcDef> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function 
rule: 
<classDeclOrFuncDef>: <funcDef> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHead> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function 
rule: 
<funcDef>: <funcHead> <funcBody> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id function 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function 
rule: 
<funcHead>: function id <funcHeadFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function 
rule: 
matching: function [function, function, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <funcHeadFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction 
rule: 
matching: id [id, whileFunction, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> openpar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( 
rule: 
<funcHeadFollowing>: openpar <fParams> closepar returntype <returnType> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar <fParams> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( 
rule: 
matching: openpar [openpar, (, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype closepar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) 
rule: 
<fParams>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> returntype 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) 
rule: 
matching: closepar [closepar, ), 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <returnType> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => 
rule: 
matching: returntype [returntype, =>, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> <type> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
rule: 
<returnType>: <type> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> integer 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
rule: 
<type>: integer 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> <funcBody> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
rule: 
matching: integer [integer, integer, 17]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> opencubr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
rule: 
<funcBody>: opencubr <multiLocalVarDeclOrStmt> closecubr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
rule: 
matching: opencubr [opencubr, {, 18]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <relExpr> openpar while 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while 
rule: 
<statement>: while openpar <relExpr> closepar <statBlock> semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <relExpr> openpar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while 
rule: 
matching: while [while, while, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <relExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( 
rule: 
matching: openpar [openpar, (, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a 
rule: 
<relExpr>: <arithExpr> <relOp> <arithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a 
rule: 
matching: id [id, a, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> <indice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 
rule: 
matching: opensqbr [opensqbr, [, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> intnum 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 
rule: 
matching: intnum [intnum, 1, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] 
rule: 
matching: closesqbr [closesqbr, ], 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> id dot 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . 
rule: 
<multiIdnest>: dot id <idnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . 
rule: 
matching: dot [dot, ., 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b 
rule: 
matching: id [id, b, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 
rule: 
<idnestFollowing>: <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> <indice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> opensqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 
rule: 
matching: opensqbr [opensqbr, [, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> intnum 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 
rule: 
matching: intnum [intnum, 2, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> closesqbr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <multiIndice> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] 
rule: 
matching: closesqbr [closesqbr, ], 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or 
rule: 
<multiIndice>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <term> <addOp> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or 
rule: 
<rightrecArithExpr>: <addOp> <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <term> or 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or 
rule: 
<addOp>: or 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or 
rule: 
matching: or [or, or, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c 
rule: 
matching: id [id, c, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> <relOp> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> lt 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < 
rule: 
<relOp>: lt 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < 
rule: 
matching: lt [lt, <, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction 
rule: 
<factor>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <optIdnestFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction 
rule: 
matching: id [id, ifFunction, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> <idnestFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <aParams> openpar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 
rule: 
<idnestFollowing>: openpar <aParams> closepar 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <aParams> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 
rule: 
matching: openpar [openpar, (, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <expr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 
rule: 
<aParams>: <expr> <multiAParamsTail> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 
rule: 
matching: intnum [intnum, 1, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> <exprFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar <multiAParamsTail> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> closepar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) 
rule: 
<multiAParamsTail>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> <multiIdnest> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) 
rule: 
matching: closepar [closepar, ), 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> closepar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi <statBlock> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) 
rule: 
matching: closepar [closepar, ), 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> opencubr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
rule: 
<statBlock>: opencubr <multiStatement> closecubr 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
rule: 
matching: opencubr [opencubr, {, 19]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> <statement> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read 
rule: 
<multiStatement>: <statement> <multiStatement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <variable> openpar read 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read 
rule: 
<statement>: read openpar <variable> closepar semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <variable> openpar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read 
rule: 
matching: read [read, read, 20]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <variable> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( 
rule: 
matching: openpar [openpar, (, 20]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <multiIdnest> <optIdnestFollowing> id 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d 
rule: 
<variable>: id <optIdnestFollowing> <multiIdnest> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <multiIdnest> <optIdnestFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d 
rule: 
matching: id [id, d, 20]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar <multiIdnest> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) 
rule: 
<optIdnestFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi closepar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) 
rule: 
<multiIdnest>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> semi 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) 
rule: 
matching: closepar [closepar, ), 20]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr <multiStatement> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
rule: 
matching: semi [semi, ;, 20]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closecubr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} 
rule: 
<multiStatement>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} 
rule: 
matching: closecubr [closecubr, }, 21]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} ; 
rule: 
matching: semi [semi, ;, 21]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} ; 
return 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} ; 
return 
rule: 
<localVarDeclOrStmt>: <statement> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <expr> openpar return 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} ; 
return 
rule: 
<statement>: return openpar <expr> closepar semi 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <expr> openpar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} ; 
return 
rule: 
matching: return [return, return, 22]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <expr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} ; 
return ( 
rule: 
matching: openpar [openpar, (, 22]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <arithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} ; 
return ( 1 
rule: 
<expr>: <arithExpr> <exprFollowing> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <term> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} ; 
return ( 1 
rule: 
<arithExpr>: <term> <rightrecArithExpr> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> <factor> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} ; 
return ( 1 
rule: 
<term>: <factor> <rightrecTerm> 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> intnum 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} ; 
return ( 1 
rule: 
<factor>: intnum 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> <rightrecTerm> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} ; 
return ( 1 
rule: 
matching: intnum [intnum, 1, 22]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> <rightrecArithExpr> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} ; 
return ( 1 ) 
rule: 
<rightrecTerm>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar <exprFollowing> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} ; 
return ( 1 ) 
rule: 
<rightrecArithExpr>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi closepar 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} ; 
return ( 1 ) 
rule: 
<exprFollowing>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> semi 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} ; 
return ( 1 ) 
rule: 
matching: closepar [closepar, ), 22]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr <multiLocalVarDeclOrStmt> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} ; 
return ( 1 ) ; 
rule: 
matching: semi [semi, ;, 22]
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> closecubr 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} ; 
return ( 1 ) ; 
} 
rule: 
<multiLocalVarDeclOrStmt>: 
-----------------------------------------------------------------------
stack: 
<$> <multiClassDeclOrFuncDef> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} ; 
return ( 1 ) ; 
} 
rule: 
matching: closecubr [closecubr, }, 23]
-----------------------------------------------------------------------
stack: 
<$> 
input: 
class A isa B , C , D , E { 
attribute c : integer ; 
private attribute b : float ; 
public attribute d : E ; 
public constructor : ( A : float , B : float ) ; 
} ; 
function A :: ifFunction ( ) => void 
{ 
if ( a < 1 ) then { 
} else { 
a ( b ) . c [ 1 ] [ e ] = a [ 2 ] [ 1 ] . b [ 3 ] [ 4 ] + c . d [ 3 ] [ 5 ] . b ( 1 ) ; 
} ; 
return ( 0 ) ; 
} 
function whileFunction ( ) => integer 
{ 
while ( a [ 1 ] . b [ 2 ] or c < ifFunction ( 1 ) ) { 
read ( d ) ; 
} ; 
return ( 1 ) ; 
} 
rule: 
<multiClassDeclOrFuncDef>: 
-----------------------------------------------------------------------
