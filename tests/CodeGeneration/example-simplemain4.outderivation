stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [EPSILON: epsilon] 
input: 
function 
rule: 
<START>: [EPSILON: epsilon] <multiClassDeclOrFuncDef> [CREATE_NODE: program] 
semantic stack: 

-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> <classDeclOrFuncDef> 
input: 
function 
rule: 
<multiClassDeclOrFuncDef>: <classDeclOrFuncDef> <multiClassDeclOrFuncDef> 
semantic stack: 
[epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> <funcDef> 
input: 
function 
rule: 
<classDeclOrFuncDef>: <funcDef> 
semantic stack: 
[epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> <funcHead> 
input: 
function 
rule: 
<funcDef>: <funcHead> <funcBody> [CREATE_NODE: function] 
semantic stack: 
[epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> <funcHeadFollowing> [CREATE_LEAF: id] id function [EPSILON: epsilon] 
input: 
function 
rule: 
<funcHead>: [EPSILON: epsilon] function id [CREATE_LEAF: id] <funcHeadFollowing> 
semantic stack: 
[epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> <funcHeadFollowing> [CREATE_LEAF: id] id 
input: 
function 
rule: 
matching: function [function, function, 1]
semantic stack: 
[epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> <funcHeadFollowing> [CREATE_LEAF: id] 
input: 
function printArr 
rule: 
matching: id [id, printArr, 1]
semantic stack: 
[epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <fParams> [EPSILON: epsilon] openpar 
input: 
function printArr ( 
rule: 
<funcHeadFollowing>: openpar [EPSILON: epsilon] <fParams> [CREATE_NODE: fParams] closepar returntype <returnType> [CREATE_NODE: normalFunctionHead] 
semantic stack: 
[epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <fParams> [EPSILON: epsilon] 
input: 
function printArr ( 
rule: 
matching: openpar [openpar, (, 1]
semantic stack: 
[epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> [CREATE_NODE: fParam] [CREATE_NODE: arraySizes] <multiArraySize> [EPSILON: epsilon] <type> colon [CREATE_LEAF: id] id [EPSILON: epsilon] 
input: 
function printArr ( arr 
rule: 
<fParams>: [EPSILON: epsilon] id [CREATE_LEAF: id] colon <type> [EPSILON: epsilon] <multiArraySize> [CREATE_NODE: arraySizes] [CREATE_NODE: fParam] <multiFParamsTail> 
semantic stack: 
[epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> [CREATE_NODE: fParam] [CREATE_NODE: arraySizes] <multiArraySize> [EPSILON: epsilon] <type> colon [CREATE_LEAF: id] 
input: 
function printArr ( arr 
rule: 
matching: id [id, arr, 1]
semantic stack: 
[epsilon][epsilon][id][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> [CREATE_NODE: fParam] [CREATE_NODE: arraySizes] <multiArraySize> [EPSILON: epsilon] <type> 
input: 
function printArr ( arr : 
rule: 
matching: colon [colon, :, 1]
semantic stack: 
[epsilon][epsilon][id][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> [CREATE_NODE: fParam] [CREATE_NODE: arraySizes] <multiArraySize> [EPSILON: epsilon] [CREATE_LEAF: integer] integer 
input: 
function printArr ( arr : integer 
rule: 
<type>: integer [CREATE_LEAF: integer] 
semantic stack: 
[epsilon][epsilon][id][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> [CREATE_NODE: fParam] [CREATE_NODE: arraySizes] <multiArraySize> [EPSILON: epsilon] [CREATE_LEAF: integer] 
input: 
function printArr ( arr : integer 
rule: 
matching: integer [integer, integer, 1]
semantic stack: 
[epsilon][epsilon][id][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> [CREATE_NODE: fParam] [CREATE_NODE: arraySizes] <multiArraySize> <arraySize> 
input: 
function printArr ( arr : integer [ 
rule: 
<multiArraySize>: <arraySize> <multiArraySize> 
semantic stack: 
[epsilon][epsilon][id][epsilon][epsilon][id][integer][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> [CREATE_NODE: fParam] [CREATE_NODE: arraySizes] <multiArraySize> <arraySizeParam> [EPSILON: epsilon] opensqbr 
input: 
function printArr ( arr : integer [ 
rule: 
<arraySize>: opensqbr [EPSILON: epsilon] <arraySizeParam> 
semantic stack: 
[epsilon][epsilon][id][epsilon][epsilon][id][integer][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> [CREATE_NODE: fParam] [CREATE_NODE: arraySizes] <multiArraySize> <arraySizeParam> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 
rule: 
matching: opensqbr [opensqbr, [, 1]
semantic stack: 
[epsilon][epsilon][id][epsilon][epsilon][id][integer][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> [CREATE_NODE: fParam] [CREATE_NODE: arraySizes] <multiArraySize> [CREATE_NODE: arraySize] closesqbr [CREATE_LEAF: intNum] intnum 
input: 
function printArr ( arr : integer [ 7 
rule: 
<arraySizeParam>: intnum [CREATE_LEAF: intNum] closesqbr [CREATE_NODE: arraySize] 
semantic stack: 
[epsilon][epsilon][id][epsilon][epsilon][id][integer][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> [CREATE_NODE: fParam] [CREATE_NODE: arraySizes] <multiArraySize> [CREATE_NODE: arraySize] closesqbr [CREATE_LEAF: intNum] 
input: 
function printArr ( arr : integer [ 7 
rule: 
matching: intnum [intnum, 7, 1]
semantic stack: 
[epsilon][epsilon][id][epsilon][epsilon][id][integer][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> [CREATE_NODE: fParam] [CREATE_NODE: arraySizes] <multiArraySize> [CREATE_NODE: arraySize] 
input: 
function printArr ( arr : integer [ 7 ] 
rule: 
matching: closesqbr [closesqbr, ], 1]
semantic stack: 
[epsilon][epsilon][id][epsilon][epsilon][id][integer][epsilon][epsilon][intNum]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> [CREATE_NODE: fParam] [CREATE_NODE: arraySizes] 
input: 
function printArr ( arr : integer [ 7 ] , 
rule: 
<multiArraySize>: 
semantic stack: 
[epsilon][epsilon][id][epsilon][epsilon][id][integer][epsilon][arraySize]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> <fParamsTail> 
input: 
function printArr ( arr : integer [ 7 ] , 
rule: 
<multiFParamsTail>: <fParamsTail> <multiFParamsTail> 
semantic stack: 
[epsilon][epsilon][id][epsilon][fParam]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> [CREATE_NODE: fParam] [CREATE_NODE: arraySizes] <multiArraySize> [EPSILON: epsilon] <type> colon [CREATE_LEAF: id] id comma [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , 
rule: 
<fParamsTail>: [EPSILON: epsilon] comma id [CREATE_LEAF: id] colon <type> [EPSILON: epsilon] <multiArraySize> [CREATE_NODE: arraySizes] [CREATE_NODE: fParam] 
semantic stack: 
[epsilon][epsilon][id][epsilon][fParam]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> [CREATE_NODE: fParam] [CREATE_NODE: arraySizes] <multiArraySize> [EPSILON: epsilon] <type> colon [CREATE_LEAF: id] id 
input: 
function printArr ( arr : integer [ 7 ] , 
rule: 
matching: comma [comma, ,, 1]
semantic stack: 
[epsilon][epsilon][id][epsilon][fParam][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> [CREATE_NODE: fParam] [CREATE_NODE: arraySizes] <multiArraySize> [EPSILON: epsilon] <type> colon [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size 
rule: 
matching: id [id, size, 1]
semantic stack: 
[epsilon][epsilon][id][epsilon][fParam][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> [CREATE_NODE: fParam] [CREATE_NODE: arraySizes] <multiArraySize> [EPSILON: epsilon] <type> 
input: 
function printArr ( arr : integer [ 7 ] , size : 
rule: 
matching: colon [colon, :, 1]
semantic stack: 
[epsilon][epsilon][id][epsilon][fParam][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> [CREATE_NODE: fParam] [CREATE_NODE: arraySizes] <multiArraySize> [EPSILON: epsilon] [CREATE_LEAF: integer] integer 
input: 
function printArr ( arr : integer [ 7 ] , size : integer 
rule: 
<type>: integer [CREATE_LEAF: integer] 
semantic stack: 
[epsilon][epsilon][id][epsilon][fParam][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> [CREATE_NODE: fParam] [CREATE_NODE: arraySizes] <multiArraySize> [EPSILON: epsilon] [CREATE_LEAF: integer] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer 
rule: 
matching: integer [integer, integer, 1]
semantic stack: 
[epsilon][epsilon][id][epsilon][fParam][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <multiFParamsTail> [CREATE_NODE: fParam] [CREATE_NODE: arraySizes] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) 
rule: 
<multiArraySize>: 
semantic stack: 
[epsilon][epsilon][id][epsilon][fParam][epsilon][id][integer][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) 
rule: 
<multiFParamsTail>: 
semantic stack: 
[epsilon][epsilon][id][epsilon][fParam][fParam]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) 
rule: 
matching: closepar [closepar, ), 1]
semantic stack: 
[epsilon][epsilon][id][fParams]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => 
rule: 
matching: returntype [returntype, =>, 1]
semantic stack: 
[epsilon][epsilon][id][fParams]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] [CREATE_NODE: returnType] void 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void 
rule: 
<returnType>: void [CREATE_NODE: returnType] 
semantic stack: 
[epsilon][epsilon][id][fParams]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] [CREATE_NODE: returnType] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void 
rule: 
matching: void [void, void, 1]
semantic stack: 
[epsilon][epsilon][id][fParams]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> opencubr [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
rule: 
<funcBody>: [EPSILON: epsilon] opencubr <multiLocalVarDeclOrStmt> closecubr [CREATE_NODE: functionBody] 
semantic stack: 
[epsilon][normalFunctionHead]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
rule: 
matching: opencubr [opencubr, {, 1]
semantic stack: 
[epsilon][normalFunctionHead][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
semantic stack: 
[epsilon][normalFunctionHead][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <localVarDecl> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar 
rule: 
<localVarDeclOrStmt>: <localVarDecl> 
semantic stack: 
[epsilon][normalFunctionHead][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] <localVarDeclFollowing> <type> colon [CREATE_LEAF: id] id localvar [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar 
rule: 
<localVarDecl>: [EPSILON: epsilon] localvar id [CREATE_LEAF: id] colon <type> <localVarDeclFollowing> [CREATE_NODE: localVarDecl] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] <localVarDeclFollowing> <type> colon [CREATE_LEAF: id] id 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar 
rule: 
matching: localvar [localvar, localvar, 2]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] <localVarDeclFollowing> <type> colon [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z 
rule: 
matching: id [id, z, 2]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] <localVarDeclFollowing> <type> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : 
rule: 
matching: colon [colon, :, 2]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] <localVarDeclFollowing> [CREATE_LEAF: integer] integer 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer 
rule: 
<type>: integer [CREATE_LEAF: integer] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] <localVarDeclFollowing> [CREATE_LEAF: integer] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer 
rule: 
matching: integer [integer, integer, 2]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] semi [CREATE_NODE: arraySizes] <multiArraySize> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
rule: 
<localVarDeclFollowing>: [EPSILON: epsilon] <multiArraySize> [CREATE_NODE: arraySizes] semi 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][epsilon][id][integer]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] semi [CREATE_NODE: arraySizes] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
rule: 
<multiArraySize>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][epsilon][id][integer][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
rule: 
matching: semi [semi, ;, 2]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][epsilon][id][integer][arraySizes]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z 
rule: 
<localVarDeclOrStmt>: <statement> 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] id [EPSILON: epsilon] [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z 
rule: 
<statement>: [EPSILON: epsilon] [EPSILON: epsilon] id [CREATE_LEAF: id] <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z 
rule: 
matching: id [id, z, 3]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 
rule: 
<optIdnestFollowing>: [CREATE_NODE: idIndice] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 
rule: 
<multiIdnest>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> <assignOp> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> [CREATE_NODE: assignStatement] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> assign 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 
rule: 
<assignOp>: assign 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 
rule: 
matching: assign [assign, =, 3]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> <arithExpr> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 
rule: 
<expr>: [EPSILON: epsilon] <arithExpr> <exprFollowing> [CREATE_NODE: expr] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] intnum 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 
rule: 
<factor>: intnum [CREATE_LEAF: intnum] [CREATE_NODE: numFactor] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 
rule: 
matching: intnum [intnum, 0, 3]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice][epsilon][epsilon][epsilon][numFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
rule: 
<exprFollowing>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
rule: 
matching: semi [semi, ;, 3]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while 
rule: 
<localVarDeclOrStmt>: <statement> 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] <relExpr> [EPSILON: epsilon] openpar while 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while 
rule: 
<statement>: while openpar [EPSILON: epsilon] <relExpr> [CREATE_NODE: whileCondition] closepar [EPSILON: epsilon] <statBlock> [CREATE_NODE: whileBlockStatements] [CREATE_NODE: whileStatement] semi 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] <relExpr> [EPSILON: epsilon] openpar 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while 
rule: 
matching: while [while, while, 4]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] <relExpr> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( 
rule: 
matching: openpar [openpar, (, 4]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] <arithExpr> <relOp> <arithExpr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z 
rule: 
<relExpr>: <arithExpr> <relOp> <arithExpr> 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] <arithExpr> <relOp> [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] <arithExpr> <relOp> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] <arithExpr> <relOp> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] id [EPSILON: epsilon] [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z 
rule: 
<factor>: [EPSILON: epsilon] [EPSILON: epsilon] id [CREATE_LEAF: id] <optIdnestFollowing> <multiIdnest> [CREATE_NODE: idFactor] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] <arithExpr> <relOp> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z 
rule: 
matching: id [id, z, 4]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] <arithExpr> <relOp> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> [CREATE_NODE: idIndice] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= 
rule: 
<optIdnestFollowing>: [CREATE_NODE: idIndice] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon][epsilon][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] <arithExpr> <relOp> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= 
rule: 
<multiIdnest>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon][epsilon][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] <arithExpr> <relOp> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon][epsilon][idFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] <arithExpr> <relOp> [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] <arithExpr> [CREATE_LEAF: leq] leq 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= 
rule: 
<relOp>: leq [CREATE_LEAF: leq] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] <arithExpr> [CREATE_LEAF: leq] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= 
rule: 
matching: leq [leq, <=, 4]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][arithExpr][leq]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][arithExpr][leq][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] id [EPSILON: epsilon] [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size 
rule: 
<factor>: [EPSILON: epsilon] [EPSILON: epsilon] id [CREATE_LEAF: id] <optIdnestFollowing> <multiIdnest> [CREATE_NODE: idFactor] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][arithExpr][leq][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size 
rule: 
matching: id [id, size, 4]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][arithExpr][leq][epsilon][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> [CREATE_NODE: idIndice] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) 
rule: 
<optIdnestFollowing>: [CREATE_NODE: idIndice] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][arithExpr][leq][epsilon][epsilon][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) 
rule: 
<multiIdnest>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][arithExpr][leq][epsilon][epsilon][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][arithExpr][leq][epsilon][epsilon][idFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] closepar [CREATE_NODE: whileCondition] [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][arithExpr][leq][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] <statBlock> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) 
rule: 
matching: closepar [closepar, ), 4]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> opencubr 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
rule: 
<statBlock>: opencubr <multiStatement> closecubr 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
rule: 
matching: opencubr [opencubr, {, 4]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> <statement> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write 
rule: 
<multiStatement>: <statement> <multiStatement> 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar <expr> openpar write 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write 
rule: 
<statement>: write openpar <expr> closepar [CREATE_NODE: writeStatement] semi 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar <expr> openpar 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write 
rule: 
matching: write [write, write, 5]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar <expr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( 
rule: 
matching: openpar [openpar, (, 5]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> <arithExpr> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr 
rule: 
<expr>: [EPSILON: epsilon] <arithExpr> <exprFollowing> [CREATE_NODE: expr] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] id [EPSILON: epsilon] [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr 
rule: 
<factor>: [EPSILON: epsilon] [EPSILON: epsilon] id [CREATE_LEAF: id] <optIdnestFollowing> <multiIdnest> [CREATE_NODE: idFactor] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr 
rule: 
matching: id [id, arr, 5]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> <idnestFollowing> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][epsilon][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ 
rule: 
<idnestFollowing>: [EPSILON: epsilon] <multiIndice> [CREATE_NODE: indices] [CREATE_NODE: idIndice] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][epsilon][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> <indice> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][epsilon][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr <arithExpr> opensqbr 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][epsilon][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr <arithExpr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ 
rule: 
matching: opensqbr [opensqbr, [, 5]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][epsilon][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][epsilon][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][epsilon][epsilon][epsilon][id][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] id [EPSILON: epsilon] [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z 
rule: 
<factor>: [EPSILON: epsilon] [EPSILON: epsilon] id [CREATE_LEAF: id] <optIdnestFollowing> <multiIdnest> [CREATE_NODE: idFactor] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][epsilon][epsilon][epsilon][id][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z 
rule: 
matching: id [id, z, 5]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][epsilon][epsilon][epsilon][id][epsilon][epsilon][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> [CREATE_NODE: idIndice] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] 
rule: 
<optIdnestFollowing>: [CREATE_NODE: idIndice] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][epsilon][epsilon][epsilon][id][epsilon][epsilon][epsilon][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] 
rule: 
<multiIdnest>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][epsilon][epsilon][epsilon][id][epsilon][epsilon][epsilon][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][epsilon][epsilon][epsilon][id][epsilon][epsilon][epsilon][idFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][epsilon][epsilon][epsilon][id][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] 
rule: 
matching: closesqbr [closesqbr, ], 5]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][epsilon][epsilon][epsilon][id][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) 
rule: 
<multiIndice>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][epsilon][epsilon][epsilon][id][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) 
rule: 
<multiIdnest>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][epsilon][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][epsilon][idFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] closepar [CREATE_NODE: expr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) 
rule: 
<exprFollowing>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: writeStatement] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) 
rule: 
matching: closepar [closepar, ), 5]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][expr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
rule: 
matching: semi [semi, ;, 5]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> <statement> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z 
rule: 
<multiStatement>: <statement> <multiStatement> 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] id [EPSILON: epsilon] [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z 
rule: 
<statement>: [EPSILON: epsilon] [EPSILON: epsilon] id [CREATE_LEAF: id] <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z 
rule: 
matching: id [id, z, 6]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = 
rule: 
<optIdnestFollowing>: [CREATE_NODE: idIndice] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi <functionCallOrAssignStat> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = 
rule: 
<multiIdnest>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] <expr> <assignOp> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> [CREATE_NODE: assignStatement] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] <expr> assign 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = 
rule: 
<assignOp>: assign 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] <expr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = 
rule: 
matching: assign [assign, =, 6]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> <arithExpr> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z 
rule: 
<expr>: [EPSILON: epsilon] <arithExpr> <exprFollowing> [CREATE_NODE: expr] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] id [EPSILON: epsilon] [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z 
rule: 
<factor>: [EPSILON: epsilon] [EPSILON: epsilon] id [CREATE_LEAF: id] <optIdnestFollowing> <multiIdnest> [CREATE_NODE: idFactor] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z 
rule: 
matching: id [id, z, 6]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice][epsilon][epsilon][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> [CREATE_NODE: idIndice] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 
rule: 
<optIdnestFollowing>: [CREATE_NODE: idIndice] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice][epsilon][epsilon][epsilon][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 
rule: 
<multiIdnest>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice][epsilon][epsilon][epsilon][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice][epsilon][epsilon][epsilon][idFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> <addOp> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 
rule: 
<rightrecArithExpr>: <addOp> <term> <rightrecArithExpr> 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [CREATE_LEAF: plus] plus 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 
rule: 
<addOp>: plus [CREATE_LEAF: plus] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [CREATE_LEAF: plus] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 
rule: 
matching: plus [plus, +, 6]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice][epsilon][epsilon][term][plus]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] intnum 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 
rule: 
<factor>: intnum [CREATE_LEAF: intnum] [CREATE_NODE: numFactor] 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice][epsilon][epsilon][term][plus][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 
rule: 
matching: intnum [intnum, 1, 6]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice][epsilon][epsilon][term][plus][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice][epsilon][epsilon][term][plus][epsilon][numFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice][epsilon][epsilon][term][plus][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
rule: 
<exprFollowing>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][epsilon][idIndice][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr <multiStatement> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
rule: 
matching: semi [semi, ;, 6]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] closecubr 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} 
rule: 
<multiStatement>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: whileStatement] [CREATE_NODE: whileBlockStatements] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} 
rule: 
matching: closecubr [closecubr, }, 7]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileCondition][epsilon][writeStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
rule: 
matching: semi [semi, ;, 7]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
rule: 
<multiLocalVarDeclOrStmt>: 
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
rule: 
matching: closecubr [closecubr, }, 8]
semantic stack: 
[epsilon][normalFunctionHead][epsilon][localVarDecl][assignStatement][whileStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> <classDeclOrFuncDef> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function 
rule: 
<multiClassDeclOrFuncDef>: <classDeclOrFuncDef> <multiClassDeclOrFuncDef> 
semantic stack: 
[epsilon][function]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> <funcDef> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function 
rule: 
<classDeclOrFuncDef>: <funcDef> 
semantic stack: 
[epsilon][function]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> <funcHead> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function 
rule: 
<funcDef>: <funcHead> <funcBody> [CREATE_NODE: function] 
semantic stack: 
[epsilon][function]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> <funcHeadFollowing> [CREATE_LEAF: id] id function [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function 
rule: 
<funcHead>: [EPSILON: epsilon] function id [CREATE_LEAF: id] <funcHeadFollowing> 
semantic stack: 
[epsilon][function]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> <funcHeadFollowing> [CREATE_LEAF: id] id 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function 
rule: 
matching: function [function, function, 10]
semantic stack: 
[epsilon][function][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> <funcHeadFollowing> [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main 
rule: 
matching: id [id, main, 10]
semantic stack: 
[epsilon][function][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <fParams> [EPSILON: epsilon] openpar 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( 
rule: 
<funcHeadFollowing>: openpar [EPSILON: epsilon] <fParams> [CREATE_NODE: fParams] closepar returntype <returnType> [CREATE_NODE: normalFunctionHead] 
semantic stack: 
[epsilon][function][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] <fParams> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( 
rule: 
matching: openpar [openpar, (, 10]
semantic stack: 
[epsilon][function][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype closepar [CREATE_NODE: fParams] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) 
rule: 
<fParams>: 
semantic stack: 
[epsilon][function][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> returntype 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) 
rule: 
matching: closepar [closepar, ), 10]
semantic stack: 
[epsilon][function][epsilon][id][fParams]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] <returnType> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => 
rule: 
matching: returntype [returntype, =>, 10]
semantic stack: 
[epsilon][function][epsilon][id][fParams]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] [CREATE_NODE: returnType] void 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
rule: 
<returnType>: void [CREATE_NODE: returnType] 
semantic stack: 
[epsilon][function][epsilon][id][fParams]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] <funcBody> [CREATE_NODE: normalFunctionHead] [CREATE_NODE: returnType] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
rule: 
matching: void [void, void, 10]
semantic stack: 
[epsilon][function][epsilon][id][fParams]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> opencubr [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
rule: 
<funcBody>: [EPSILON: epsilon] opencubr <multiLocalVarDeclOrStmt> closecubr [CREATE_NODE: functionBody] 
semantic stack: 
[epsilon][function][normalFunctionHead]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
rule: 
matching: opencubr [opencubr, {, 11]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <localVarDecl> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar 
rule: 
<localVarDeclOrStmt>: <localVarDecl> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] <localVarDeclFollowing> <type> colon [CREATE_LEAF: id] id localvar [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar 
rule: 
<localVarDecl>: [EPSILON: epsilon] localvar id [CREATE_LEAF: id] colon <type> <localVarDeclFollowing> [CREATE_NODE: localVarDecl] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] <localVarDeclFollowing> <type> colon [CREATE_LEAF: id] id 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar 
rule: 
matching: localvar [localvar, localvar, 12]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] <localVarDeclFollowing> <type> colon [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr 
rule: 
matching: id [id, arr, 12]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] <localVarDeclFollowing> <type> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : 
rule: 
matching: colon [colon, :, 12]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] <localVarDeclFollowing> [CREATE_LEAF: integer] integer 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer 
rule: 
<type>: integer [CREATE_LEAF: integer] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] <localVarDeclFollowing> [CREATE_LEAF: integer] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer 
rule: 
matching: integer [integer, integer, 12]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] semi [CREATE_NODE: arraySizes] <multiArraySize> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 
rule: 
<localVarDeclFollowing>: [EPSILON: epsilon] <multiArraySize> [CREATE_NODE: arraySizes] semi 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][epsilon][id][integer]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] semi [CREATE_NODE: arraySizes] <multiArraySize> <arraySize> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 
rule: 
<multiArraySize>: <arraySize> <multiArraySize> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][epsilon][id][integer][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] semi [CREATE_NODE: arraySizes] <multiArraySize> <arraySizeParam> [EPSILON: epsilon] opensqbr 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 
rule: 
<arraySize>: opensqbr [EPSILON: epsilon] <arraySizeParam> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][epsilon][id][integer][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] semi [CREATE_NODE: arraySizes] <multiArraySize> <arraySizeParam> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 
rule: 
matching: opensqbr [opensqbr, [, 12]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][epsilon][id][integer][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] semi [CREATE_NODE: arraySizes] <multiArraySize> [CREATE_NODE: arraySize] closesqbr [CREATE_LEAF: intNum] intnum 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 
rule: 
<arraySizeParam>: intnum [CREATE_LEAF: intNum] closesqbr [CREATE_NODE: arraySize] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][epsilon][id][integer][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] semi [CREATE_NODE: arraySizes] <multiArraySize> [CREATE_NODE: arraySize] closesqbr [CREATE_LEAF: intNum] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 
rule: 
matching: intnum [intnum, 7, 12]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][epsilon][id][integer][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] semi [CREATE_NODE: arraySizes] <multiArraySize> [CREATE_NODE: arraySize] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] 
rule: 
matching: closesqbr [closesqbr, ], 12]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][epsilon][id][integer][epsilon][epsilon][intNum]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] semi [CREATE_NODE: arraySizes] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
rule: 
<multiArraySize>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][epsilon][id][integer][epsilon][arraySize]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> [CREATE_NODE: localVarDecl] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
rule: 
matching: semi [semi, ;, 12]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][epsilon][id][integer][arraySizes]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr 
rule: 
<localVarDeclOrStmt>: <statement> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] id [EPSILON: epsilon] [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr 
rule: 
<statement>: [EPSILON: epsilon] [EPSILON: epsilon] id [CREATE_LEAF: id] <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr 
rule: 
matching: id [id, arr, 13]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 
rule: 
<idnestFollowing>: [EPSILON: epsilon] <multiIndice> [CREATE_NODE: indices] [CREATE_NODE: idIndice] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> <indice> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr <arithExpr> opensqbr 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr <arithExpr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 
rule: 
matching: opensqbr [opensqbr, [, 13]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][epsilon][id][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] intnum 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 
rule: 
<factor>: intnum [CREATE_LEAF: intnum] [CREATE_NODE: numFactor] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][epsilon][id][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 
rule: 
matching: intnum [intnum, 0, 13]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][epsilon][id][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][epsilon][id][epsilon][epsilon][epsilon][numFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][epsilon][id][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] 
rule: 
matching: closesqbr [closesqbr, ], 13]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][epsilon][id][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 
rule: 
<multiIndice>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][epsilon][id][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 
rule: 
<multiIdnest>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> <assignOp> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> [CREATE_NODE: assignStatement] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> assign 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 
rule: 
<assignOp>: assign 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 
rule: 
matching: assign [assign, =, 13]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> <arithExpr> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 
rule: 
<expr>: [EPSILON: epsilon] <arithExpr> <exprFollowing> [CREATE_NODE: expr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] intnum 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 
rule: 
<factor>: intnum [CREATE_LEAF: intnum] [CREATE_NODE: numFactor] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 
rule: 
matching: intnum [intnum, 64, 13]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice][epsilon][epsilon][epsilon][numFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
rule: 
<exprFollowing>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][epsilon][idIndice][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
rule: 
matching: semi [semi, ;, 13]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr 
rule: 
<localVarDeclOrStmt>: <statement> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] id [EPSILON: epsilon] [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr 
rule: 
<statement>: [EPSILON: epsilon] [EPSILON: epsilon] id [CREATE_LEAF: id] <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr 
rule: 
matching: id [id, arr, 14]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 
rule: 
<idnestFollowing>: [EPSILON: epsilon] <multiIndice> [CREATE_NODE: indices] [CREATE_NODE: idIndice] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> <indice> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr <arithExpr> opensqbr 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr <arithExpr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 
rule: 
matching: opensqbr [opensqbr, [, 14]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon][id][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] intnum 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 
rule: 
<factor>: intnum [CREATE_LEAF: intnum] [CREATE_NODE: numFactor] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 
rule: 
matching: intnum [intnum, 1, 14]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon][numFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon][id][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] 
rule: 
matching: closesqbr [closesqbr, ], 14]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon][id][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 
rule: 
<multiIndice>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][epsilon][id][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 
rule: 
<multiIdnest>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> <assignOp> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> [CREATE_NODE: assignStatement] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> assign 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 
rule: 
<assignOp>: assign 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 
rule: 
matching: assign [assign, =, 14]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> <arithExpr> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 
rule: 
<expr>: [EPSILON: epsilon] <arithExpr> <exprFollowing> [CREATE_NODE: expr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][idIndice][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][idIndice][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] intnum 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 
rule: 
<factor>: intnum [CREATE_LEAF: intnum] [CREATE_NODE: numFactor] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][idIndice][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 
rule: 
matching: intnum [intnum, 34, 14]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][idIndice][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][idIndice][epsilon][epsilon][epsilon][numFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][idIndice][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
rule: 
<exprFollowing>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][epsilon][idIndice][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
rule: 
matching: semi [semi, ;, 14]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr 
rule: 
<localVarDeclOrStmt>: <statement> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] id [EPSILON: epsilon] [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr 
rule: 
<statement>: [EPSILON: epsilon] [EPSILON: epsilon] id [CREATE_LEAF: id] <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr 
rule: 
matching: id [id, arr, 15]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 
rule: 
<idnestFollowing>: [EPSILON: epsilon] <multiIndice> [CREATE_NODE: indices] [CREATE_NODE: idIndice] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> <indice> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr <arithExpr> opensqbr 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr <arithExpr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 
rule: 
matching: opensqbr [opensqbr, [, 15]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] intnum 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 
rule: 
<factor>: intnum [CREATE_LEAF: intnum] [CREATE_NODE: numFactor] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 
rule: 
matching: intnum [intnum, 2, 15]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon][numFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] 
rule: 
matching: closesqbr [closesqbr, ], 15]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 
rule: 
<multiIndice>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 
rule: 
<multiIdnest>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> <assignOp> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> [CREATE_NODE: assignStatement] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> assign 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 
rule: 
<assignOp>: assign 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 
rule: 
matching: assign [assign, =, 15]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> <arithExpr> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 
rule: 
<expr>: [EPSILON: epsilon] <arithExpr> <exprFollowing> [CREATE_NODE: expr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][idIndice][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] intnum 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 
rule: 
<factor>: intnum [CREATE_LEAF: intnum] [CREATE_NODE: numFactor] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 
rule: 
matching: intnum [intnum, 25, 15]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][epsilon][numFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
rule: 
<exprFollowing>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][epsilon][idIndice][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
rule: 
matching: semi [semi, ;, 15]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr 
rule: 
<localVarDeclOrStmt>: <statement> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] id [EPSILON: epsilon] [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr 
rule: 
<statement>: [EPSILON: epsilon] [EPSILON: epsilon] id [CREATE_LEAF: id] <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr 
rule: 
matching: id [id, arr, 16]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 
rule: 
<idnestFollowing>: [EPSILON: epsilon] <multiIndice> [CREATE_NODE: indices] [CREATE_NODE: idIndice] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> <indice> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr <arithExpr> opensqbr 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr <arithExpr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 
rule: 
matching: opensqbr [opensqbr, [, 16]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] intnum 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 
rule: 
<factor>: intnum [CREATE_LEAF: intnum] [CREATE_NODE: numFactor] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 
rule: 
matching: intnum [intnum, 3, 16]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon][numFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] 
rule: 
matching: closesqbr [closesqbr, ], 16]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 
rule: 
<multiIndice>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 
rule: 
<multiIdnest>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> <assignOp> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> [CREATE_NODE: assignStatement] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> assign 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 
rule: 
<assignOp>: assign 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 
rule: 
matching: assign [assign, =, 16]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> <arithExpr> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 
rule: 
<expr>: [EPSILON: epsilon] <arithExpr> <exprFollowing> [CREATE_NODE: expr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] intnum 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 
rule: 
<factor>: intnum [CREATE_LEAF: intnum] [CREATE_NODE: numFactor] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 
rule: 
matching: intnum [intnum, 12, 16]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][epsilon][numFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
rule: 
<exprFollowing>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
rule: 
matching: semi [semi, ;, 16]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr 
rule: 
<localVarDeclOrStmt>: <statement> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] id [EPSILON: epsilon] [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr 
rule: 
<statement>: [EPSILON: epsilon] [EPSILON: epsilon] id [CREATE_LEAF: id] <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr 
rule: 
matching: id [id, arr, 17]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 
rule: 
<idnestFollowing>: [EPSILON: epsilon] <multiIndice> [CREATE_NODE: indices] [CREATE_NODE: idIndice] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> <indice> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr <arithExpr> opensqbr 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr <arithExpr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 
rule: 
matching: opensqbr [opensqbr, [, 17]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] intnum 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 
rule: 
<factor>: intnum [CREATE_LEAF: intnum] [CREATE_NODE: numFactor] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 
rule: 
matching: intnum [intnum, 4, 17]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon][numFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] 
rule: 
matching: closesqbr [closesqbr, ], 17]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 
rule: 
<multiIndice>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 
rule: 
<multiIdnest>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> <assignOp> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> [CREATE_NODE: assignStatement] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> assign 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 
rule: 
<assignOp>: assign 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 
rule: 
matching: assign [assign, =, 17]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> <arithExpr> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 
rule: 
<expr>: [EPSILON: epsilon] <arithExpr> <exprFollowing> [CREATE_NODE: expr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] intnum 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 
rule: 
<factor>: intnum [CREATE_LEAF: intnum] [CREATE_NODE: numFactor] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 
rule: 
matching: intnum [intnum, 22, 17]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][epsilon][numFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
rule: 
<exprFollowing>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
rule: 
matching: semi [semi, ;, 17]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr 
rule: 
<localVarDeclOrStmt>: <statement> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] id [EPSILON: epsilon] [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr 
rule: 
<statement>: [EPSILON: epsilon] [EPSILON: epsilon] id [CREATE_LEAF: id] <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr 
rule: 
matching: id [id, arr, 18]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 
rule: 
<idnestFollowing>: [EPSILON: epsilon] <multiIndice> [CREATE_NODE: indices] [CREATE_NODE: idIndice] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> <indice> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr <arithExpr> opensqbr 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr <arithExpr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 
rule: 
matching: opensqbr [opensqbr, [, 18]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] intnum 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 
rule: 
<factor>: intnum [CREATE_LEAF: intnum] [CREATE_NODE: numFactor] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 
rule: 
matching: intnum [intnum, 5, 18]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon][numFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] 
rule: 
matching: closesqbr [closesqbr, ], 18]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 
rule: 
<multiIndice>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 
rule: 
<multiIdnest>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> <assignOp> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> [CREATE_NODE: assignStatement] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> assign 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 
rule: 
<assignOp>: assign 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 
rule: 
matching: assign [assign, =, 18]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> <arithExpr> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 
rule: 
<expr>: [EPSILON: epsilon] <arithExpr> <exprFollowing> [CREATE_NODE: expr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] intnum 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 
rule: 
<factor>: intnum [CREATE_LEAF: intnum] [CREATE_NODE: numFactor] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 
rule: 
matching: intnum [intnum, 11, 18]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][epsilon][numFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
rule: 
<exprFollowing>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
rule: 
matching: semi [semi, ;, 18]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr 
rule: 
<localVarDeclOrStmt>: <statement> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] id [EPSILON: epsilon] [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr 
rule: 
<statement>: [EPSILON: epsilon] [EPSILON: epsilon] id [CREATE_LEAF: id] <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr 
rule: 
matching: id [id, arr, 19]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 
rule: 
<idnestFollowing>: [EPSILON: epsilon] <multiIndice> [CREATE_NODE: indices] [CREATE_NODE: idIndice] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> <indice> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 
rule: 
<multiIndice>: <indice> <multiIndice> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr <arithExpr> opensqbr 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 
rule: 
<indice>: opensqbr <arithExpr> closesqbr 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr <arithExpr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 
rule: 
matching: opensqbr [opensqbr, [, 19]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] intnum 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 
rule: 
<factor>: intnum [CREATE_LEAF: intnum] [CREATE_NODE: numFactor] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 
rule: 
matching: intnum [intnum, 6, 19]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon][numFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> closesqbr [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] <multiIndice> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] 
rule: 
matching: closesqbr [closesqbr, ], 19]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: idIndice] [CREATE_NODE: indices] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 
rule: 
<multiIndice>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 
rule: 
<multiIdnest>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> <assignOp> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 
rule: 
<functionCallOrAssignStat>: <assignOp> <expr> [CREATE_NODE: assignStatement] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> assign 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 
rule: 
<assignOp>: assign 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] <expr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 
rule: 
matching: assign [assign, =, 19]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> <arithExpr> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 
rule: 
<expr>: [EPSILON: epsilon] <arithExpr> <exprFollowing> [CREATE_NODE: expr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] intnum 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 
rule: 
<factor>: intnum [CREATE_LEAF: intnum] [CREATE_NODE: numFactor] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 
rule: 
matching: intnum [intnum, 90, 19]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][epsilon][numFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: assignStatement] [CREATE_NODE: expr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
rule: 
<exprFollowing>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][idIndice][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
rule: 
matching: semi [semi, ;, 19]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <localVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr 
rule: 
<multiLocalVarDeclOrStmt>: <localVarDeclOrStmt> <multiLocalVarDeclOrStmt> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> <statement> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr 
rule: 
<localVarDeclOrStmt>: <statement> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] id [EPSILON: epsilon] [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr 
rule: 
<statement>: [EPSILON: epsilon] [EPSILON: epsilon] id [CREATE_LEAF: id] <optIdnestFollowing> <multiIdnest> <functionCallOrAssignStat> semi 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr 
rule: 
matching: id [id, printArr, 20]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> <idnestFollowing> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( 
rule: 
<optIdnestFollowing>: <idnestFollowing> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <aParams> openpar 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( 
rule: 
<idnestFollowing>: openpar <aParams> closepar [CREATE_NODE: funcCall] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <aParams> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( 
rule: 
matching: openpar [openpar, (, 20]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> <expr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr 
rule: 
<aParams>: <expr> <multiAParamsTail> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> [CREATE_NODE: expr] <exprFollowing> <arithExpr> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr 
rule: 
<expr>: [EPSILON: epsilon] <arithExpr> <exprFollowing> [CREATE_NODE: expr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] id [EPSILON: epsilon] [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr 
rule: 
<factor>: [EPSILON: epsilon] [EPSILON: epsilon] id [CREATE_LEAF: id] <optIdnestFollowing> <multiIdnest> [CREATE_NODE: idFactor] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> <optIdnestFollowing> [CREATE_LEAF: id] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr 
rule: 
matching: id [id, arr, 20]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] <multiIdnest> [CREATE_NODE: idIndice] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 
rule: 
<optIdnestFollowing>: [CREATE_NODE: idIndice] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon][epsilon][epsilon][id]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: idFactor] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 
rule: 
<multiIdnest>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon][epsilon][idIndice]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][epsilon][idFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> [CREATE_NODE: expr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 
rule: 
<exprFollowing>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> <aParamsTail> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 
rule: 
<multiAParamsTail>: <aParamsTail> <multiAParamsTail> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][expr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> <expr> comma 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 
rule: 
<aParamsTail>: comma <expr> 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][expr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> <expr> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 
rule: 
matching: comma [comma, ,, 20]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][expr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> [CREATE_NODE: expr] <exprFollowing> <arithExpr> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 6 
rule: 
<expr>: [EPSILON: epsilon] <arithExpr> <exprFollowing> [CREATE_NODE: expr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][expr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> <term> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 6 
rule: 
<arithExpr>: [EPSILON: epsilon] <term> <rightrecArithExpr> [CREATE_NODE: arithExpr] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][expr][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> <factor> [EPSILON: epsilon] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 6 
rule: 
<term>: [EPSILON: epsilon] <factor> <rightrecTerm> [CREATE_NODE: term] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][expr][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] intnum 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 6 
rule: 
<factor>: intnum [CREATE_LEAF: intnum] [CREATE_NODE: numFactor] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][expr][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] <rightrecTerm> [CREATE_NODE: numFactor] [CREATE_LEAF: intnum] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 6 
rule: 
matching: intnum [intnum, 6, 20]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][expr][epsilon][epsilon][epsilon]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] <rightrecArithExpr> [CREATE_NODE: term] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 6 ) 
rule: 
<rightrecTerm>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][expr][epsilon][epsilon][epsilon][numFactor]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> [CREATE_NODE: expr] <exprFollowing> [CREATE_NODE: arithExpr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 6 ) 
rule: 
<rightrecArithExpr>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][expr][epsilon][epsilon][term]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar <multiAParamsTail> [CREATE_NODE: expr] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 6 ) 
rule: 
<exprFollowing>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][expr][epsilon][arithExpr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] closepar 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 6 ) 
rule: 
<multiAParamsTail>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][expr][expr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> <multiIdnest> [CREATE_NODE: funcCall] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 6 ) 
rule: 
matching: closepar [closepar, ), 20]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][epsilon][id][expr][expr]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi <functionCallOrAssignStat> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 6 ) ; 
rule: 
<multiIdnest>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][funcCall]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> semi [CREATE_NODE: functionCallStatement] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 6 ) ; 
rule: 
<functionCallOrAssignStat>: [CREATE_NODE: functionCallStatement] 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][epsilon][funcCall]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 6 ) ; 
rule: 
matching: semi [semi, ;, 20]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][functionCallStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr <multiLocalVarDeclOrStmt> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 6 ) ; 
// write(arr[z + 1]);  
rule: 
skipping
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][functionCallStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] closecubr 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 6 ) ; 
// write(arr[z + 1]);  
} 
rule: 
<multiLocalVarDeclOrStmt>: 
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][functionCallStatement]
-----------------------------------------------------------------------
stack: 
<$> [CREATE_NODE: program] <multiClassDeclOrFuncDef> [CREATE_NODE: function] [CREATE_NODE: functionBody] 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 6 ) ; 
// write(arr[z + 1]);  
} 
rule: 
matching: closecubr [closecubr, }, 22]
semantic stack: 
[epsilon][function][normalFunctionHead][epsilon][localVarDecl][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][assignStatement][functionCallStatement]
-----------------------------------------------------------------------
stack: 
<$> 
input: 
function printArr ( arr : integer [ 7 ] , size : integer ) => void { 
localvar z : integer ; 
z = 0 ; 
while ( z <= size ) { 
write ( arr [ z ] ) ; 
z = z + 1 ; 
} ; 
} 
function main ( ) => void 
{ 
localvar arr : integer [ 7 ] ; 
arr [ 0 ] = 64 ; 
arr [ 1 ] = 34 ; 
arr [ 2 ] = 25 ; 
arr [ 3 ] = 12 ; 
arr [ 4 ] = 22 ; 
arr [ 5 ] = 11 ; 
arr [ 6 ] = 90 ; 
printArr ( arr , 6 ) ; 
// write(arr[z + 1]);  
} 
rule: 
<multiClassDeclOrFuncDef>: 
semantic stack: 
[program]
-----------------------------------------------------------------------
